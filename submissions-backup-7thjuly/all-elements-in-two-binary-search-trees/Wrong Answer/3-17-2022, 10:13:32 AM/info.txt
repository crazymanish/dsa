{"id":661731263,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647508412,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/661731263/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func getAllElements(_ root1: TreeNode?, _ root2: TreeNode?) -> [Int] {\n        let root1Elements = inorderTraversal(root1)\n        let root2Elements = inorderTraversal(root2)\n\n        return mergeElementsInAscendingOrder(root1Elements, array2: root2Elements)\n    }\n\n    private func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        guard let currentNode = root else { return [] }\n\n        let leftInorder = inorderTraversal(currentNode.left)\n        let rightInorder = inorderTraversal(currentNode.right)\n\n        return leftInorder + [currentNode.val] + rightInorder\n    }\n\n    private func mergeElementsInAscendingOrder(_ array1: [Int], array2: [Int]) -> [Int] {\n        var inputArray1 = array1\n        var inputArray2 = array2\n        var outputArray: [Int] = []\n\n        while inputArray1.isEmpty == false && array2.isEmpty == false {\n            let minElement: Int\n\n            if inputArray1.isEmpty {\n                minElement = inputArray2.removeFirst()\n            } else if inputArray1.isEmpty {\n                minElement = inputArray1.removeFirst()\n            } else {\n                let array1FirstElement = inputArray1.first ?? Int.max\n                let array2FirstElement = inputArray2.first ?? Int.max\n\n                if array1FirstElement < array2FirstElement {\n                    minElement = inputArray1.removeFirst()\n                } else {\n                    minElement = inputArray2.removeFirst()\n                }\n            }\n\n            outputArray.append(minElement)\n        }\n\n        return outputArray\n    }\n}","compare_result":"111000010100100111010111111100001100100101101010","title_slug":"all-elements-in-two-binary-search-trees"}