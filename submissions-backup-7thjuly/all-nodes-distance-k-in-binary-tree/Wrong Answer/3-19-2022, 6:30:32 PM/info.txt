{"id":663154662,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647711032,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/663154662/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func distanceK(_ root: TreeNode?, _ target: TreeNode?, _ k: Int) -> [Int] {\n        guard let root = root, let target = target else { return [] }\n\n        var depthWithValuesMap: [Int: [Int]] = [:]\n        var targetNodeDepth: Int!\n        let queue = Queue<NodeInfo>()\n        queue.enQueue(NodeInfo(root, 0))\n\n        while queue.isEmpty == false {\n            let currentNodeInfo = queue.deQueue()!\n            let currentNode = currentNodeInfo.node\n            let currentDepth = currentNodeInfo.depth\n            let absDepth = abs(currentDepth)\n\n            if currentNode.val == target.val { \n                targetNodeDepth = absDepth \n            } else {\n                if let currentDepthMap = depthWithValuesMap[absDepth] {\n                    depthWithValuesMap[absDepth] = currentDepthMap + [currentNode.val]\n                } else {\n                    depthWithValuesMap[absDepth] = [currentNode.val]\n                }   \n            }\n\n            if let leftNode = currentNode.left {\n                queue.enQueue(NodeInfo(leftNode, currentDepth-1))\n            }\n\n            if let rightNode = currentNode.right {\n                queue.enQueue(NodeInfo(rightNode, currentDepth+1))\n            }\n        }\n\n        let leftNodes = depthWithValuesMap[k-targetNodeDepth] ?? []\n        let rightNodes = depthWithValuesMap[k+targetNodeDepth] ?? []\n        return leftNodes + rightNodes\n    }\n}\n\nprivate class NodeInfo {\n    let node: TreeNode\n    let depth: Int\n\n    init(_ node: TreeNode, _ depth: Int) {\n        self.node = node\n        self.depth = depth\n    }\n}\n\nclass Queue<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: T) {\n        array.append(value)\n    }\n\n    func deQueue() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n","compare_result":"111100100000000000000000000000000000010000100100110101100","title_slug":"all-nodes-distance-k-in-binary-tree"}