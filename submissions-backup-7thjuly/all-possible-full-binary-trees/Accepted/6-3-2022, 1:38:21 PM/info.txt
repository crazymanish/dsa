{"id":713493500,"lang":"swift","time":"1Â month","timestamp":1654256301,"status_display":"Accepted","runtime":"174 ms","url":"/submissions/detail/713493500/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"16.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var hashMap: [Int: [TreeNode]] = [:]\n    \n    func allPossibleFBT(_ n: Int) -> [TreeNode?] {\n        if n == 0 { return [] }\n        if n == 1 { return [TreeNode(0)] }\n        if let cacheFBT = hashMap[n] { return cacheFBT }\n        \n        var result: [TreeNode] = []\n        \n        for possibleLeftNode in 1..<n {\n            let possibleRightNode = n - possibleLeftNode - 1\n            \n            let leftPossibleFBTs = allPossibleFBT(possibleLeftNode)\n            let rightPossibleFBTs = allPossibleFBT(possibleRightNode)\n            \n            for leftPossibleFBT in leftPossibleFBTs {\n                for rightPossibleFBT in rightPossibleFBTs {\n                    result.append(TreeNode(0, leftPossibleFBT, rightPossibleFBT))\n                } \n            }\n            \n            hashMap[n] = result\n        }\n        \n        return result\n    }\n}","compare_result":"11111111111111111111","title_slug":"all-possible-full-binary-trees"}