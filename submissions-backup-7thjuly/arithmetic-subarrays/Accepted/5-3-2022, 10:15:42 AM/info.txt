{"id":692173326,"lang":"swift","time":"2Â months","timestamp":1651565742,"status_display":"Accepted","runtime":"187 ms","url":"/submissions/detail/692173326/","is_pending":"Not Pending","title":"Arithmetic Subarrays","memory":"14.2 MB","code":"class Solution {\n    func checkArithmeticSubarrays(_ nums: [Int], _ l: [Int], _ r: [Int]) -> [Bool] {\n        func findArithmeticSlices(_ startIndex: Int, _ endIndex: Int) -> Bool {\n            let numsCount = endIndex-startIndex\n            \n            guard numsCount > 0 else { return false }\n            \n            let sortedNums = nums[startIndex...endIndex].sorted()\n            let expectedDiff = sortedNums[1] - sortedNums[0]\n            \n            for index in 1...numsCount {\n                let diff = sortedNums[index] - sortedNums[index-1]\n            \n                if diff != expectedDiff { return false }\n            }\n        \n            return true\n        }\n        \n        var output: [Bool] = []\n        for (index, lValue) in l.enumerated() {\n            let rValue = r[index]\n            \n            let answer = findArithmeticSlices(lValue, rValue)\n            output.append(answer)\n        }\n        \n        return output\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"arithmetic-subarrays"}