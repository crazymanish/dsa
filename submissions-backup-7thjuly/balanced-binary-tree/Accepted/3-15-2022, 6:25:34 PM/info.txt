{"id":660630290,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647365134,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/660630290/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"15 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isBalanced(_ root: TreeNode?) -> Bool {\n        guard let currentNode = root else { return true }\n\n        let leftHeight = height(currentNode.left)\n        let rightHeight = height(currentNode.right)\n\n        if abs(leftHeight - rightHeight) > 1 { return false }\n\n        return isBalanced(currentNode.left) && isBalanced(currentNode.right)\n    }\n\n    private func height(_ root: TreeNode?) -> Int {\n        guard let currentNode = root else { return 0 }\n\n        let leftHeight = height(currentNode.left)\n        let rightHeight = height(currentNode.right)\n\n        return 1 + max(leftHeight, rightHeight)\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}