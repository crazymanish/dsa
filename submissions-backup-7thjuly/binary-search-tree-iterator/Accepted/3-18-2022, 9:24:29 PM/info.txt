{"id":662617638,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647635069,"status_display":"Accepted","runtime":"143 ms","url":"/submissions/detail/662617638/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"16.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\n\nclass BSTIterator {\n    private var array: [Int] = []\n\n    init(_ root: TreeNode?) {\n        array = inorderTraversal(root)\n    }\n    \n    private func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        guard let currentNode = root else { return [] }\n        \n        let leftInorderTraversal = inorderTraversal(currentNode.left)\n        let rightInorderTraversal = inorderTraversal(currentNode.right)\n        \n        return leftInorderTraversal + [currentNode.val] + rightInorderTraversal\n    }\n    \n    func next() -> Int { array.removeFirst() }\n    \n    func hasNext() -> Bool { !array.isEmpty }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * let obj = BSTIterator(root)\n * let ret_1: Int = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}