{"id":662649682,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647640090,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/662649682/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"14.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func levelOrder(_ root: TreeNode?) -> [[Int]] {\n        guard let root = root else { return [] }\n\n        var levelOrderValues: [[Int]] = []\n        let queue = Queue()\n        queue.enQueue(root)\n\n        while queue.isEmpty == false {\n            let queueCount = queue.count\n            var currentLevelValues: [Int] = []\n\n            for _ in 0..<queueCount {\n                let currentNode = queue.deQueue()!\n\n                currentLevelValues.append(currentNode.val)\n\n                if let leftNode = currentNode.left { queue.enQueue(leftNode) }\n                if let rightNode = currentNode.right { queue.enQueue(rightNode) }\n            }\n\n            levelOrderValues.append(currentLevelValues)\n        }\n\n        return levelOrderValues\n    }\n}\n\nclass Queue {\n    private var array: [TreeNode] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    var count: Int { return array.count }\n\n    func enQueue(_ value: TreeNode) {\n        array.append(value)\n    }\n\n    func deQueue() -> TreeNode? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}