{"id":659018810,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647158053,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/659018810/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"14.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\n        guard let root = root else { return [] }\n        \n        var output: [String] = []\n\n        let queue = Queue<Array<String>>()\n        findAllPaths(root, queue: queue, currentPathNodes: [])\n\n        while queue.isEmpty == false {\n            let currentPathNodes = queue.deQueue()!\n            let currentPath = currentPathNodes.joined(separator: \"->\")\n\n            output.append(currentPath)\n        }\n\n        return output\n    }\n    \n    private func findAllPaths(_ root: TreeNode?, queue: Queue<Array<String>>, currentPathNodes: [String]) {\n        if root == nil { return }\n\n        let newPathNodes = currentPathNodes + [String(root!.val)]\n\n        if root?.left == nil && root?.right == nil {\n            queue.enQueue(newPathNodes)\n        } else {\n            findAllPaths(root?.left, queue: queue, currentPathNodes: newPathNodes)\n            findAllPaths(root?.right, queue: queue, currentPathNodes: newPathNodes)\n        }\n    }\n}\n\nclass Queue<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: T) {\n        array.append(value)\n    }\n\n    func deQueue() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths"}