{"id":663071056,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647703388,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/663071056/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"14 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func pruneTree(_ root: TreeNode?) -> TreeNode? {\n        guard let currentNode = root else { return nil }\n\n        if currentNode.val == 0 && currentNode.isLeafNode { return nil }\n\n        let leftPruneTree = pruneTree(currentNode.left)\n        let rightPruneTree = pruneTree(currentNode.right)\n        \n        if currentNode.val == 0 && leftPruneTree == nil && rightPruneTree == nil { return nil }\n\n        return TreeNode(currentNode.val, leftPruneTree, rightPruneTree)\n    }\n}\n\nprivate extension TreeNode {\n    var isLeafNode: Bool { left == nil && right == nil }\n}","compare_result":"111111111111111111111111111111","title_slug":"binary-tree-pruning"}