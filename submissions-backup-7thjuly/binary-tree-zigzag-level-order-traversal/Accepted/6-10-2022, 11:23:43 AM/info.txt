{"id":718784347,"lang":"swift","time":"3 weeks, 6 days","timestamp":1654853023,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/718784347/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"14.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func zigzagLevelOrder(_ root: TreeNode?) -> [[Int]] {\n        guard let root = root else { return [] }\n\n        var outputArray: [[Int]] = []\n        var zigzagFlag = true\n        let queue = Queue<TreeNode>()\n        queue.enQueue(root)\n\n        while queue.isEmpty == false {\n            var currentLevelValues: [Int] = []\n            let stack = Stack<Int>()\n            let queueCount = queue.count\n\n            for _ in 0..<queueCount {\n                let currentNode = queue.deQueue()!\n\n                if zigzagFlag {\n                    currentLevelValues.append(currentNode.val)\n                } else {\n                    stack.push(currentNode.val)\n                }\n\n                if let leftNode = currentNode.left { queue.enQueue(leftNode) }\n                if let rightNode = currentNode.right { queue.enQueue(rightNode) }\n            }\n\n            while stack.isEmpty == false { currentLevelValues.append(stack.pop()!) }\n\n            outputArray.append(currentLevelValues)\n            zigzagFlag.toggle()\n        }\n\n        return outputArray\n    }\n}\n\nclass Stack<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func push(_ value: T) {\n        array.append(value)\n    }\n\n    func pop() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeLast()\n    }\n}\n\n\nclass Queue<T> {\n    private var array: [T] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    var count: Int { array.count }\n    \n    func enQueue(_ element: T) {\n        array.append(element)\n    }\n    \n    func deQueue() -> T? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"binary-tree-zigzag-level-order-traversal"}