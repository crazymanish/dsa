{"id":677830478,"lang":"swift","time":"2 months, 4 weeks","timestamp":1649618570,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/677830478/","is_pending":"Not Pending","title":"Check if a Parentheses String Can Be Valid","memory":"N/A","code":"class Solution {\n    func canBeValid(_ s: String, _ locked: String) -> Bool {\n        let lockedArray = Array(locked)\n        let stack = Stack()\n        \n        var index = 0\n        for char in s {\n            if char.isOpeningBracket {\n                stack.push(char)\n            } else {\n                if let stackChar = stack.pop() {\n                    if stackChar.isClosingBracket && lockedArray[index] == \"1\" { return false }\n                } else {\n                    if lockedArray[index] == \"1\" { stack.push(char) }\n                    if lockedArray[index] == \"0\" { stack.push(\"(\") }\n                }\n            }\n            \n            index += 1\n        }\n        \n        return stack.isEmpty\n    }\n}\n\nextension Character {\n    var isOpeningBracket: Bool { self == \"(\" }\n    var isClosingBracket: Bool { self == \")\" }\n}\n\nclass Stack {\n    private var array: [Character] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    func push(_ element: Character) {\n        array.append(element)\n    }\n    \n    func pop() -> Character? {\n        if isEmpty { return nil }\n        \n        return array.removeLast()\n    }\n}","compare_result":"111110111011001111101111111111011111000111011111101011100100011101111111111111110101100111101110111011101111111101110111111111111011100111011100111111110111110100111011111110110111111011111110110111111001101101111111111111101110010111111100001101111110110011","title_slug":"check-if-a-parentheses-string-can-be-valid"}