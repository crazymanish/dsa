{"id":679216915,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649797283,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/679216915/","is_pending":"Not Pending","title":"Coin Change 2","memory":"14.2 MB","code":"class Solution {\n    // (Unbounded) Knapsack problem variation - Dynamic Programming\n    func change(_ amount: Int, _ coins: [Int]) -> Int {\n        guard amount > 0 else { return 1 } // Base case\n        \n        let coinsCount = coins.count\n        var dpCache: [Int] = Array(repeating: 0, count: (amount + 1))\n        dpCache[0] = 1 // Base case (If amount is 0)\n        \n        // https://www.geeksforgeeks.org/coin-change-dp-7/?ref=lbp\n        for coin in coins {\n            for currentAmount in 1...amount {\n                if currentAmount >= coin {\n                    dpCache[currentAmount] += dpCache[currentAmount-coin]   \n                }\n            }\n        }\n\n        return dpCache[amount]\n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"coin-change-2"}