{"id":679214586,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649796947,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/679214586/","is_pending":"Not Pending","title":"Coin Change 2","memory":"N/A","code":"class Solution {\n    // (Unbounded) Knapsack problem variation - Dynamic Programming\n    func change(_ amount: Int, _ coins: [Int]) -> Int {\n        let coinsCount = coins.count\n        var dpCache: [Int] = Array(repeating: 0, count: (amount + 1))\n        dpCache[0] = 1 // Base case (If amount is 0)\n        \n        if amount > 0 {\n            // https://www.geeksforgeeks.org/coin-change-dp-7/?ref=lbp\n            for coinIndex in 0..<coinsCount {\n                let currentCoin = coins[coinIndex]\n                for currentAmount in currentCoin...amount {\n                    dpCache[currentAmount] += dpCache[currentAmount-currentCoin]\n                }\n            }\n        }\n\n        return dpCache[amount]\n    }\n}\n","compare_result":"1111111111111111111110000000","title_slug":"coin-change-2"}