{"id":679200712,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649795012,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/679200712/","is_pending":"Not Pending","title":"Coin Change","memory":"14.2 MB","code":"class Solution {\n    // (Unbounded) Knapsack problem variation - Dynamic Programming\n    func coinChange(_ coins: [Int], _ amount: Int) -> Int {\n        let coinsCount = coins.count\n        var dpCache: [Int] = Array(repeating: Int.max, count: (amount + 1))\n        dpCache[0] = 0 // Base case (If amount is 0)\n        \n        if amount > 0 {\n            for currentAmount in 1...amount {\n                for coinIndex in 0..<coinsCount {\n                    let currentCoin = coins[coinIndex]\n\n                    if currentCoin <= currentAmount {\n                        let possibleResult = dpCache[currentAmount-currentCoin]\n                    \n                        if possibleResult != Int.max && possibleResult+1 < dpCache[currentAmount] {\n                            dpCache[currentAmount] = possibleResult+1\n                        }\n                    }\n                }\n            }\n        }\n        \n        if dpCache[amount] == Int.max { return -1 }\n\n        return dpCache[amount]\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-change"}