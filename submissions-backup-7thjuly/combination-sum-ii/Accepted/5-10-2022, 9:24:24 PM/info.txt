{"id":696979217,"lang":"swift","time":"1 month, 4 weeks","timestamp":1652210664,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/696979217/","is_pending":"Not Pending","title":"Combination Sum II","memory":"14 MB","code":"class Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        let lastIndex = candidates.count-1\n        let sortedCandidates = candidates.sorted()    \n        \n        var allCombinations: [[Int]] = []\n        var currentCombination: [Int] = []\n        var currentCombinationSum = 0\n        \n        func findCombinations(_ currentIndex: Int) {\n            if currentCombinationSum == target {\n                allCombinations.append(currentCombination)\n                return\n            }\n            \n            if currentIndex > lastIndex { return }\n\n            for index in currentIndex...lastIndex {\n                let value = sortedCandidates[index]\n                \n                if currentCombinationSum+value > target { return } // Not possible if sum is greater than target\n                if index > 0, index != currentIndex, value == sortedCandidates[index-1] { continue } // Skip duplicate\n                \n                currentCombination.append(value)\n                currentCombinationSum += value\n                \n                findCombinations(index+1)\n                \n                currentCombination.removeLast() // backtracking\n                currentCombinationSum -= value // backtracking\n            }\n        }    \n        \n        findCombinations(0)\n        return allCombinations\n    }\n}\n\n/* Works but getting TLE\nclass Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        let lastIndex = candidates.count-1\n        let sortedCandidates = candidates.sorted()\n        \n        var allCombinations: Set<[Int]> = []\n        var currentCombination: [Int] = []\n        var currentCombinationSum = 0\n\n        func findCombinations(_ currentIndex: Int) {\n            if currentCombinationSum == target {\n                allCombinations.insert(currentCombination)\n                return\n            }\n            \n            if currentCombinationSum > target { return }\n            if currentIndex > lastIndex { return }\n\n            // Choice1: Consider current index value for combination-sum\n            let value = sortedCandidates[currentIndex]\n                \n            currentCombination.append(value)\n            currentCombinationSum += value\n                \n            findCombinations(currentIndex+1)\n                \n            currentCombination.removeLast() // backtracking\n            currentCombinationSum -= value // backtracking\n                \n            // Choice2: Ignore current index value for combination-sum\n            findCombinations(currentIndex+1)\n        }\n\n        findCombinations(0)\n        return Array(allCombinations)\n    }\n}\n*/","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii"}