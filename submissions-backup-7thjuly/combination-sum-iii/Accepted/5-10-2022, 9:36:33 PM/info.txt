{"id":696985362,"lang":"swift","time":"1 month, 4 weeks","timestamp":1652211393,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/696985362/","is_pending":"Not Pending","title":"Combination Sum III","memory":"14 MB","code":"class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n        let candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        let lastIndex = candidates.count-1\n        \n        var allCombinations: [[Int]] = []\n        var currentCombination: [Int] = []\n        var currentCombinationSum = 0\n        \n        func findCombinations(_ currentIndex: Int) {\n            if currentCombinationSum == n && currentCombination.count == k {\n                allCombinations.append(currentCombination)\n                return\n            }\n            \n            if currentIndex > lastIndex { return }\n\n            for index in currentIndex...lastIndex {\n                let value = candidates[index]\n                \n                // Not possible if sum is greater than target\n                if currentCombinationSum+value > n { return } \n                \n                currentCombination.append(value)\n                currentCombinationSum += value\n                \n                findCombinations(index+1)\n                \n                currentCombination.removeLast() // backtracking\n                currentCombinationSum -= value // backtracking\n            }\n        }    \n        \n        findCombinations(0)\n        return allCombinations\n    }\n}","compare_result":"111111111111111111","title_slug":"combination-sum-iii"}