{"id":704015560,"lang":"swift","time":"1 month, 2 weeks","timestamp":1653133960,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/704015560/","is_pending":"Not Pending","title":"Construct String from Binary Tree","memory":"14.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func tree2str(_ root: TreeNode?) -> String {\n        guard let root = root else { return \"\" }\n\n        if root.left == nil && root.right == nil {\n            return \"\\(root.val)\"\n        }\n\n        let leftTree2str = tree2str(root.left)\n\n        if root.left != nil && root.right == nil {\n            return \"\\(root.val)\" + \"(\" + leftTree2str + \")\"\n        }\n\n        let rightTree2str = tree2str(root.right)\n\n        return \"\\(root.val)\" + \"(\" + leftTree2str + \")\"  + \"(\" + rightTree2str + \")\"\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-string-from-binary-tree"}