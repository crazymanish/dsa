{"id":721772949,"lang":"swift","time":"3 weeks, 2 days","timestamp":1655181739,"status_display":"Accepted","runtime":"1093 ms","url":"/submissions/detail/721772949/","is_pending":"Not Pending","title":"Contains Duplicate II","memory":"18.6 MB","code":"class Solution {\n    typealias ValueIndex = [Int : Int]\n    private var hashMap: ValueIndex = [:]\n    private let slidingWindowSize = 2\n    private var slidingWindow: SlidingWindow<[Int]>!\n\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\n        slidingWindow = SlidingWindow(nums)\n        let inputNumsCount = nums.count\n        var isNearbyDuplicateFound = false\n\n        while slidingWindow.endIndex < inputNumsCount {\n            handleScenarioBeforeReachingTheWindowSize()\n            isNearbyDuplicateFound = handleScenarioOnReachingTheWindowSize(k)\n\n            if isNearbyDuplicateFound { break }\n\n            // Slide window by one from end.\n            slidingWindow.endIndex += 1\n        }\n\n        return isNearbyDuplicateFound\n    }\n\n    private func handleScenarioBeforeReachingTheWindowSize() {\n        // Just keep adding values into hash with index\n        if slidingWindow.value.count < slidingWindowSize {\n            let lastValue = Array(slidingWindow.endIndexValue).first!\n\n            hashMap[lastValue] = slidingWindow.endIndex\n        }\n    }\n\n    private func handleScenarioOnReachingTheWindowSize(_ k: Int) -> Bool {\n        if slidingWindow.value.count == slidingWindowSize {\n            let lastValue = Array(slidingWindow.endIndexValue).first!\n\n            if let cacheIndex = hashMap[lastValue], abs(cacheIndex - slidingWindow.endIndex) <= k {\n                return true // Found the NearBy duplicate\n            }\n            hashMap[lastValue] = slidingWindow.endIndex\n\n            // Slide window by one from start.\n            slidingWindow.startIndex += 1\n        }\n\n        return false\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate-ii"}