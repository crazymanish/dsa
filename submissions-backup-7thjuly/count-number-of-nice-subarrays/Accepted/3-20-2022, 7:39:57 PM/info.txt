{"id":663881066,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647801597,"status_display":"Accepted","runtime":"2084 ms","url":"/submissions/detail/663881066/","is_pending":"Not Pending","title":"Count Number of Nice Subarrays","memory":"16.7 MB","code":"class Solution {\n    private var slidingWindow: SlidingWindow<[Int]>!\n    private var currentSlidingWindowSubarrays = 0\n    private var numberOfSubarrays = 0\n    private var targetOddNumbers = 0\n\n    private var slidingWindowFirstValue: Int { Array(slidingWindow.startIndexValue).first! }\n    private var slidingWindowLastValue: Int { Array(slidingWindow.endIndexValue).first! }\n\n    func numberOfSubarrays(_ nums: [Int], _ k: Int) -> Int {\n        slidingWindow = SlidingWindow(nums)\n        targetOddNumbers = k\n\n        while slidingWindow.endIndex < nums.count {\n            if slidingWindowLastValue % 2 != 0 { handleWhenValueIsOdd() }\n\n            handleWhenTargetOddNumbersConditionMet()\n\n            numberOfSubarrays += currentSlidingWindowSubarrays\n\n            // Slide window by one from end.\n            slidingWindow.endIndex += 1\n        }\n\n        return numberOfSubarrays\n    }\n\n    private func handleWhenValueIsOdd() {\n        targetOddNumbers -= 1\n        currentSlidingWindowSubarrays = 0\n    }\n\n    private func handleWhenTargetOddNumbersConditionMet() {\n        while targetOddNumbers == 0 {\n            if slidingWindowFirstValue % 2 != 0 { targetOddNumbers += 1 }\n\n            currentSlidingWindowSubarrays += 1\n            slidingWindow.startIndex += 1 // Slide window by one from start.\n        }\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"11111111111111111111111111111111111111","title_slug":"count-number-of-nice-subarrays"}