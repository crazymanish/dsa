{"id":668308218,"lang":"swift","time":"3 months, 1 week","timestamp":1648388416,"status_display":"Accepted","runtime":"975 ms","url":"/submissions/detail/668308218/","is_pending":"Not Pending","title":"Count Vowel Substrings of a String","memory":"14.6 MB","code":"class Solution {\n    let vowelsHashMap: [Character:Bool] = [\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true]\n    \n    func countVowelSubstrings(_ word: String) -> Int {\n        let wordCount = word.count\n        var slidingWindow = SlidingWindow(word)\n        var slidingWindowLastValue: Character { slidingWindow.endIndexValue.first! }\n        var frequencyHashMap: [Character:Int] = [:]\n        var vowelsCounter = 0\n        var output = 0\n        \n        while slidingWindow.endIndex < wordCount {\n            let lastValue = slidingWindowLastValue\n            if isVowel(lastValue) {\n                handleVowel(lastValue, &slidingWindow, &frequencyHashMap, &vowelsCounter, &output)\n            } else {\n                handleNotVowel(&slidingWindow, &frequencyHashMap, &vowelsCounter)\n            }\n            \n            if slidingWindow.endIndex == wordCount && slidingWindow.startIndex < wordCount-5 {\n                handleNotVowel(&slidingWindow, &frequencyHashMap, &vowelsCounter)\n            }\n        }\n        \n        return output\n    }\n    \n    func isVowel(_ char: Character) -> Bool { vowelsHashMap[char] != nil }\n    \n    private func handleVowel(\n        _ char: Character, \n        _ slidingWindow: inout SlidingWindow<String>, \n        _ frequencyHashMap: inout [Character:Int], \n        _ vowelsCounter: inout Int,\n        _ output: inout Int) {\n        \n        if let hashMapValue = frequencyHashMap[char] {\n            frequencyHashMap[char] = hashMapValue + 1\n        } else {\n            frequencyHashMap[char] = 1\n            vowelsCounter += 1\n        }\n        \n        if vowelsCounter == 5 { \n            output += 1\n            print(slidingWindow.value)\n        }\n        \n        slidingWindow.endIndex += 1 // Slide window by one from end.\n    }\n    \n    private func handleNotVowel(\n        _ slidingWindow: inout SlidingWindow<String>, \n        _ frequencyHashMap: inout [Character:Int], \n        _ vowelsCounter: inout Int) {\n        frequencyHashMap = [:]\n        vowelsCounter = 0\n        \n        slidingWindow.startIndex += 1 // Slide window by one from start.\n        slidingWindow.endIndex = slidingWindow.startIndex // Reset Slide window from end.\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var size: Int { endIndex - startIndex + 1 }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-vowel-substrings-of-a-string"}