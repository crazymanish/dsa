{"id":660012438,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647284502,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/660012438/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isCousins(_ root: TreeNode?, _ x: Int, _ y: Int) -> Bool {\n        guard let root = root else { return false }\n\n        typealias TreeNodeLevelAndDistance = (level: Int, distance: Int)\n        var hashMap: [Int : TreeNodeLevelAndDistance] = [:]\n\n        let queue = Queue<TreeNode>()\n        queue.enQueue(root)\n        hashMap[root.val] = (level: 0, distance: 0)\n\n        while queue.isEmpty == false {\n            let currentNode = queue.deQueue()!\n            let currentNodeMap = hashMap[currentNode.val]!\n\n            if let leftNode = currentNode.left {\n                queue.enQueue(leftNode)\n                hashMap[leftNode.val] = (level: currentNodeMap.level + 1, distance: currentNodeMap.distance - 1)\n            }\n\n            if let rightNode = currentNode.right {\n                queue.enQueue(rightNode)\n                hashMap[rightNode.val] = (level: currentNodeMap.level + 1, distance: currentNodeMap.distance + 1)\n            }\n        }\n\n        let xNodeHashMap = hashMap[x]!\n        let yNodeHashMap = hashMap[y]!\n\n        return xNodeHashMap.level == yNodeHashMap.level && xNodeHashMap.distance != yNodeHashMap.distance\n    }\n} \n\nclass Queue<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: T) {\n        array.append(value)\n    }\n\n    func deQueue() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n","compare_result":"110110101011111001110010111111111111111011101011111111110111100111111011111110111111101011111111111111111","title_slug":"cousins-in-binary-tree"}