{"id":682396257,"lang":"swift","time":"2 months, 2 weeks","timestamp":1650230757,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/682396257/","is_pending":"Not Pending","title":"Decode Ways","memory":"14.5 MB","code":"class Solution {\n    func numDecodings(_ s: String) -> Int {\n        let sCount = s.count\n        let hashMap = [\"1\": \"A\",\"2\": \"B\",\"3\": \"C\",\"4\": \"D\",\"5\": \"E\",\"6\": \"F\",\"7\": \"G\",\"8\": \"H\",\"9\": \"I\",\"10\": \"J\",\"11\": \"K\",\"12\": \"L\",\"13\": \"M\",\"14\": \"N\",\"15\": \"O\",\"16\": \"P\",\"17\": \"Q\",\"18\": \"R\",\"19\": \"S\",\"20\": \"T\",\"21\": \"U\",\"22\": \"V\",\"23\": \"W\",\"24\": \"X\",\"25\": \"Y\",\"26\": \"Z\"]\n        var dpCache = Array(repeating: -1, count: sCount+1)\n\n        func numDecodings(_ sArray: [Character], _ count: Int, _ dpCache: inout [Int]) -> Int {\n            if count == 0 {\n                dpCache[count] = 1\n                return 1\n            }\n\n            if dpCache[count] != -1 { return dpCache[count] }\n\n            var output = 0\n\n            if sArray[count-1] != \"0\" {\n                output += numDecodings(sArray, count-1, &dpCache)\n            }\n\n            if count > 1 {\n                let lastTwoNumsString = String(sArray[count-2])+String(sArray[count-1])\n                if hashMap[lastTwoNumsString] != nil {\n                    output += numDecodings(sArray, count-2, &dpCache)\n                }\n            }\n\n            dpCache[count] = output\n            return output\n        }\n\n        return numDecodings(Array(s), sCount, &dpCache)\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"decode-ways"}