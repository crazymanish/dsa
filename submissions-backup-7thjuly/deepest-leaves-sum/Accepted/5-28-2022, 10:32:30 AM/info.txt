{"id":708862925,"lang":"swift","time":"1 month, 1 week","timestamp":1653726750,"status_display":"Accepted","runtime":"316 ms","url":"/submissions/detail/708862925/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"15.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var deepestLevel = Int.min\n    private var deepestLevelNodeValuesMap: [Int: [Int]] = [:]\n\n    func deepestLeavesSum(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        findDeepestLeaves(root, 0)\n        \n        let deepestLevelNodeValues = deepestLevelNodeValuesMap[deepestLevel]!\n\n        var outputSum = 0\n        \n        for deepestLevelNodeValue in deepestLevelNodeValues {\n            outputSum += deepestLevelNodeValue\n        }\n        \n        return outputSum\n    }\n    \n    private func findDeepestLeaves(_ root: TreeNode?, _ currentLevel: Int) {\n        guard let currentNode = root else { return }\n        \n        let newLevel = currentLevel + 1\n        \n        if currentNode.left == nil && currentNode.right == nil {\n            deepestLevel = max(deepestLevel, newLevel)\n            \n            if let deepestLevelNodeValues = deepestLevelNodeValuesMap[newLevel] {\n                deepestLevelNodeValuesMap[newLevel] = deepestLevelNodeValues + [currentNode.val]\n            } else {\n                deepestLevelNodeValuesMap[newLevel] = [currentNode.val]\n            }\n        }\n        \n        findDeepestLeaves(currentNode.left, newLevel)\n        findDeepestLeaves(currentNode.right, newLevel)\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"deepest-leaves-sum"}