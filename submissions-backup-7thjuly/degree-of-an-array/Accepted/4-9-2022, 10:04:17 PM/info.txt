{"id":677158779,"lang":"swift","time":"2 months, 4 weeks","timestamp":1649534657,"status_display":"Accepted","runtime":"190 ms","url":"/submissions/detail/677158779/","is_pending":"Not Pending","title":"Degree of an Array","memory":"15.4 MB","code":"class Solution {\n    func findShortestSubArray(_ nums: [Int]) -> Int {\n        var hashMap: [Int: ElementInfo] = [:]\n        \n        for (index, num) in nums.enumerated() {\n            var hashMapValue = hashMap[num] ?? ElementInfo(index)\n            hashMapValue.lastIndex = index\n            hashMapValue.count = hashMapValue.count + 1\n            \n            hashMap[num] = hashMapValue\n        }\n        \n        var maxCountKey = Int.min\n        var hashMapCountLength: [Int : Int] = [:]\n        for (_, value) in hashMap {\n            let hashMapValue = hashMapCountLength[value.count] ?? Int.max\n            hashMapCountLength[value.count] = min(hashMapValue, value.length)\n            \n            maxCountKey = max(maxCountKey, value.count)\n        }\n        \n        return hashMapCountLength[maxCountKey] ?? 0\n    }\n}\n\nclass ElementInfo {\n    let firstIndex: Int\n    var lastIndex: Int\n    var count: Int = 0\n    \n    var length: Int { lastIndex - firstIndex + 1 }\n    \n    init(_ firstIndex: Int) {\n        self.firstIndex = firstIndex\n        self.lastIndex = firstIndex\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array"}