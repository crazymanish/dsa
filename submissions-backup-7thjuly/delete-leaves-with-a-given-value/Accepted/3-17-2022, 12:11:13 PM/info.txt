{"id":661771241,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647515473,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/661771241/","is_pending":"Not Pending","title":"Delete Leaves With a Given Value","memory":"14.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var canRemoveMoreLeafNodes = true\n    \n    func removeLeafNodes(_ root: TreeNode?, _ target: Int) -> TreeNode? {\n        guard let root = root else { return nil }\n        \n        while canRemoveMoreLeafNodes { \n            canRemoveMoreLeafNodes = deleteLeafNodes(root, target) \n        } \n        \n        return root.val == target && root.isLeafNode ? nil : root\n    }\n    \n    private func deleteLeafNodes(_ root: TreeNode?, _ target: Int) -> Bool {\n        guard let currentNode = root else { return false }\n        \n        let isCurrentNodeLeafDeleted = currentNode.deleteLeafNodeIfPossible(target)\n        \n        let isLeftLeafDeleted = deleteLeafNodes(currentNode.left, target)\n        let isRightLeafDeleted = deleteLeafNodes(currentNode.right, target)\n        \n        return isCurrentNodeLeafDeleted || isLeftLeafDeleted || isRightLeafDeleted\n    }\n}\n\nextension TreeNode {\n    var isLeafNode: Bool {\n        return left == nil && right == nil\n    }\n    \n    func deleteLeafNodeIfPossible(_ target: Int) -> Bool {\n        var isDeletedLeafNode = false\n        \n        if let leftChild = left, leftChild.val == target, leftChild.isLeafNode {\n            left = nil\n            isDeletedLeafNode = true\n        }\n        \n        if let rightChild = right, rightChild.val == target, rightChild.isLeafNode {\n            right = nil\n            isDeletedLeafNode = true\n        }\n        \n        return isDeletedLeafNode\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"delete-leaves-with-a-given-value"}