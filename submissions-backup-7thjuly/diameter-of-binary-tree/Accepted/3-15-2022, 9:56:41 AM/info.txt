{"id":660404275,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647334601,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/660404275/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"14.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var outputDiameter: Int = Int.min\n    \n    func diameterOfBinaryTree(_ root: TreeNode?) -> Int {\n        calculateDiameterOfBinaryTree(root)\n        \n        return outputDiameter - 1 // length\n    }\n    \n    private func calculateDiameterOfBinaryTree(_ root: TreeNode?) -> Int {\n        guard let currentNode = root else { return 0 }\n        \n        let leftDiameter = calculateDiameterOfBinaryTree(currentNode.left)\n        let rightDiameter = calculateDiameterOfBinaryTree(currentNode.right)\n        \n        let currentNodeDiameter = max(leftDiameter, rightDiameter) + 1\n        let possibleDiameter = max(currentNodeDiameter, 1 + leftDiameter + rightDiameter)\n        \n        outputDiameter = max(outputDiameter, possibleDiameter)\n        \n        return currentNodeDiameter\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree"}