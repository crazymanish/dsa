{"id":682362835,"lang":"swift","time":"2 months, 3 weeks","timestamp":1650226126,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/682362835/","is_pending":"Not Pending","title":"Egg Drop With 2 Eggs and N Floors","memory":"13.8 MB","code":"class Solution {\n    // Dynamic programming - MCM concept\n    func twoEggDrop(_ n: Int) -> Int {\n        var dpCache = Array(repeating: Array(repeating: -1, count: n+1), count: 3)\n        \n        func findMinMoves(_ eggCount: Int, _ floorsCount: Int) -> Int {\n            // Base cases\n            if floorsCount == 0 || floorsCount == 1 { return floorsCount } \n            if eggCount == 1 { return floorsCount } \n            \n            // check result in cache first...to avoid expensive recersive-calls\n            let cacheValue = dpCache[eggCount][floorsCount] \n            if cacheValue != -1 { return cacheValue }\n            \n            // Find min moves using MCM concept\n            var minMoves = Int.max\n            for k in 1...floorsCount {\n                let eggBrokCaseCount = findAndCacheMinMoves(eggCount-1, k-1)\n                let eggNotBrokCaseCount = findAndCacheMinMoves(eggCount, floorsCount-k)\n                let tempAnswer = 1 + max(eggBrokCaseCount, eggNotBrokCaseCount)\n                \n                minMoves = min(minMoves, tempAnswer) \n            }\n            \n            // Update cache\n            dpCache[eggCount][floorsCount] = minMoves\n            \n            return minMoves\n        }\n        \n        func findAndCacheMinMoves(_ eggCount: Int, _ floorsCount: Int) -> Int {\n            let movesCount: Int\n            \n            // check result in cache first...to avoid expensive recersive-calls\n            let cacheValue = dpCache[eggCount][floorsCount] \n            if cacheValue != -1 { \n                movesCount = cacheValue \n            } else {\n                movesCount = findMinMoves(eggCount, floorsCount)\n                dpCache[eggCount][floorsCount] = movesCount\n            }\n            \n            return movesCount\n        }\n    \n        return findMinMoves(2, n)\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"egg-drop-with-2-eggs-and-n-floors"}