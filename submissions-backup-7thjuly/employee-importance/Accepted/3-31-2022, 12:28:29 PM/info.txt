{"id":670935534,"lang":"swift","time":"3 months, 1 week","timestamp":1648722509,"status_display":"Accepted","runtime":"165 ms","url":"/submissions/detail/670935534/","is_pending":"Not Pending","title":"Employee Importance","memory":"15.3 MB","code":"/**\n * Definition for Employee.\n * public class Employee {\n *     public var id: Int\n *     public var importance: Int\n *     public var subordinates: [Int]\n *     public init(_ id: Int, _ importance: Int, _ subordinates: [Int]) {\n *         self.id = id\n *         self.importance = importance\n *         self.subordinates = subordinates\n *     }\n * }\n */\n\nclass Solution {\n    func getImportance(_ employees: [Employee], _ id: Int) -> Int {\n        var hashMap: [Int : Employee] = [:]\n        \n        for employee in employees {\n            hashMap[employee.id] = employee\n        }\n        \n        var output = 0\n        let employee = hashMap[id]!\n        let queue = Queue<Employee>()\n        queue.enQueue(employee)\n        \n        while queue.isEmpty == false {\n            let currentEmployee = queue.deQueue()!\n            output += currentEmployee.importance\n            \n            for id in currentEmployee.subordinates {\n                queue.enQueue(hashMap[id]!)\n            }\n        }\n        \n        return output\n    }\n}\n\nclass Queue<T> {\n    private var array: [T] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    func enQueue(_ element: T) {\n        array.append(element)\n    }\n    \n    func deQueue() -> T? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"employee-importance"}