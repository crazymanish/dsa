{"id":694495219,"lang":"swift","time":"2Â months","timestamp":1651866962,"status_display":"Accepted","runtime":"1563 ms","url":"/submissions/detail/694495219/","is_pending":"Not Pending","title":"Even Odd Tree","memory":"32.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isEvenOddTree(_ root: TreeNode?) -> Bool {\n        guard let rootNode = root else { return false }\n        \n        let queue = Queue()\n        queue.enQueue(rootNode)\n        \n        var levelIndex = 0\n        \n        while queue.isEmpty == false {\n            let queueCount = queue.count\n            let isEvenLevelIndex = levelIndex % 2 == 0\n            var previousValue = isEvenLevelIndex ? Int.min : Int.max\n            \n            for _ in 0..<queueCount {\n                let currentNode = queue.deQueue()!\n                let currentNodeValue = currentNode.val\n                let isEvenNodeValue = currentNodeValue % 2 == 0\n                \n                if isEvenLevelIndex && isEvenNodeValue == false && currentNodeValue > previousValue {\n                    previousValue = currentNodeValue\n                } else if isEvenLevelIndex == false && isEvenNodeValue && currentNodeValue < previousValue {\n                    previousValue = currentNodeValue\n                } else {\n                    return false\n                }\n                \n                if let leftNode = currentNode.left { queue.enQueue(leftNode) }\n                if let rightNode = currentNode.right { queue.enQueue(rightNode) }\n            }\n            \n            levelIndex += 1\n        }\n        \n        return true\n    }\n}\n\nclass Queue {\n    private var array: [TreeNode] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    var count: Int { array.count }\n    \n    func enQueue(_ element: TreeNode) {\n        array.append(element)\n    }\n    \n    func deQueue() -> TreeNode? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"even-odd-tree"}