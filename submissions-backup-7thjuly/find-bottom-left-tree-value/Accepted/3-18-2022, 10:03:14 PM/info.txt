{"id":662633331,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647637394,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/662633331/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"15 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findBottomLeftValue(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        var leftMostValue = 0\n        let queue = Queue()\n        queue.enQueue(root)\n        \n        while queue.isEmpty == false {\n            let queueCount = queue.count\n            \n            for index in 0..<queueCount {\n                let currentNode = queue.deQueue()!\n                \n                if index == 0 { leftMostValue = currentNode.val }\n                \n                if let leftNode = currentNode.left { queue.enQueue(leftNode) }\n                if let rightNode = currentNode.right { queue.enQueue(rightNode) }\n            }\n        }\n        \n        return leftMostValue\n    }\n}\n\nclass Queue {\n    private var array: [TreeNode] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    var count: Int { array.count }\n    \n    func enQueue(_ element: TreeNode) {\n        array.append(element)\n    }\n    \n    func deQueue() -> TreeNode? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value"}