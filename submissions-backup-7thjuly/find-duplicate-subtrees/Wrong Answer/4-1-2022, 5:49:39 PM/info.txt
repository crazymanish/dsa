{"id":671687876,"lang":"swift","time":"3Â months, 1Â week","timestamp":1648828179,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/671687876/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    var hashMap: [String: Int] = [:]\n    var output: [String: TreeNode] = [:]\n    func findDuplicateSubtrees(_ root: TreeNode?) -> [TreeNode?] {\n        traverseTreeAndSaveIntoHashMap(root)\n        \n        return Array(output.values)\n    }\n    \n    private func traverseTreeAndSaveIntoHashMap(_ root: TreeNode?) -> [String] {\n        guard let currentNode = root else { return [] }\n        \n        let leftTraverse = traverseTreeAndSaveIntoHashMap(currentNode.left)\n        let rightTraverse = traverseTreeAndSaveIntoHashMap(currentNode.right)\n        \n        let currentTraverse = [\"\\(currentNode.val)\"] + leftTraverse + rightTraverse\n        \n        let key = currentTraverse.joined(separator: \",\")\n        let hashMapValue = hashMap[key] ?? 0\n        hashMap[key] = hashMapValue + 1\n        \n        if hashMapValue > 0 { output[key] = currentNode }\n        \n        return currentTraverse\n    }\n}","compare_result":"11110110111111111110011111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111101111111111010111111111111111111101111001011010111000000000010","title_slug":"find-duplicate-subtrees"}