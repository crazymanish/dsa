{"id":670286655,"lang":"swift","time":"3 months, 1 week","timestamp":1648636178,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/670286655/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"16.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\n\nclass FindElements {\n    var hashMap: [Int : Bool] = [:]\n    \n    init(_ root: TreeNode?) {\n        root?.val = 0\n        parseTreeAndSaveValueIntoHashMap(root)\n    }\n    \n    func find(_ target: Int) -> Bool {\n        return hashMap[target] ?? false\n    }\n    \n    private func parseTreeAndSaveValueIntoHashMap(_ root: TreeNode?) {\n        guard let currentNode = root else { return }\n        \n        let currentNodeValue = currentNode.val\n        hashMap[currentNodeValue] = true\n        \n        let leftValue = currentNodeValue * 2 + 1\n        let rightValue = currentNodeValue * 2 + 2\n        \n        currentNode.left?.val = leftValue\n        currentNode.right?.val = rightValue\n        \n        parseTreeAndSaveValueIntoHashMap(currentNode.left)\n        parseTreeAndSaveValueIntoHashMap(currentNode.right)\n    }\n}\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * let obj = FindElements(root)\n * let ret_1: Bool = obj.find(target)\n */","compare_result":"1111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree"}