{"id":691832254,"lang":"swift","time":"2Â months","timestamp":1651522741,"status_display":"Accepted","runtime":"2564 ms","url":"/submissions/detail/691832254/","is_pending":"Not Pending","title":"Find if Path Exists in Graph","memory":"82.7 MB","code":"class Solution {\n    func validPath(_ n: Int, _ edges: [[Int]], _ source: Int, _ destination: Int) -> Bool {\n        func buildGraphAdjacencyList(_ edges: [[Int]]) -> [Int : [Int]] {\n            var adjacencyList: [Int : [Int]] = [:]\n            \n            for edge in edges {\n                let sourceNode = edge[0]\n                let destinationNode = edge[1]\n                \n                if adjacencyList[sourceNode] == nil { adjacencyList[sourceNode] = [] }\n                if adjacencyList[destinationNode] == nil { adjacencyList[destinationNode] = [] }\n                \n                adjacencyList[sourceNode]! += [destinationNode]\n                adjacencyList[destinationNode]! += [sourceNode]\n            }\n            \n            return adjacencyList\n        }\n        \n        func hasValidPathFromSourceNode(_ currentNode: Int) -> Bool {\n            if visitedNodes.contains(currentNode) { return false }\n            visitedNodes.insert(currentNode)\n            \n            if currentNode == destination { return true }\n            \n            let neighbors = graphAdjacencyList[currentNode] ?? []\n            for neighbor in neighbors {\n                let hashPath = hasValidPathFromSourceNode(neighbor)\n                if hashPath == true { return true }\n            }\n            \n            return false\n        }\n        \n        var visitedNodes: Set<Int> = []\n        let graphAdjacencyList = buildGraphAdjacencyList(edges)\n        \n        return hasValidPathFromSourceNode(source)\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"find-if-path-exists-in-graph"}