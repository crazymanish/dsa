{"id":706766771,"lang":"swift","time":"1 month, 1 week","timestamp":1653463327,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/706766771/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"14.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var nodeValueCounterMap: [Int : Int] = [:]\n    private var maximumCounter: Int = Int.min\n\n    func findMode(_ root: TreeNode?) -> [Int] {\n        guard let currentNode = root else { return [] }\n\n        findRecursiveMode(currentNode)\n\n        var outputResults: [Int] = []\n\n        for (key, value) in nodeValueCounterMap {\n            if value == maximumCounter { outputResults.append(key) }\n        }\n\n        return outputResults\n    }\n\n    private func findRecursiveMode(_ root: TreeNode?) {\n        guard let currentNode = root else { return }\n\n        let currentNodeValue = currentNode.val\n        let currentNodeCounter: Int\n\n        if let cacheCounter = nodeValueCounterMap[currentNodeValue] {\n            currentNodeCounter = cacheCounter + 1\n        } else {\n            currentNodeCounter = 0\n        }\n\n        nodeValueCounterMap[currentNodeValue] = currentNodeCounter\n\n        maximumCounter = max(maximumCounter, currentNodeCounter)\n\n        findRecursiveMode(currentNode.left)\n        findRecursiveMode(currentNode.right)\n    }\n}\n","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree"}