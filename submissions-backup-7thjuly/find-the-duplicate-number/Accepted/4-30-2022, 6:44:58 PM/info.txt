{"id":690342411,"lang":"swift","time":"2 months, 1 week","timestamp":1651337098,"status_display":"Accepted","runtime":"775 ms","url":"/submissions/detail/690342411/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"18.5 MB","code":"class Solution {\n    func findDuplicate(_ nums: [Int]) -> Int {\n        let numsSorted = nums.sorted()\n        let lastIndex = nums.count-1\n        \n        func findDuplicateUsingRecursiveBinarySearch(_ startIndex: Int, _ endIndex: Int) -> Int {\n            if startIndex > endIndex { return -1 } // Not found, base-case\n            \n            let midIndex = startIndex + (endIndex-startIndex) / 2\n            let midIndexValue = numsSorted[midIndex]\n            \n            let leftValue = midIndex-1 >= 0 ? numsSorted[midIndex-1] : -1\n            let rightValue = midIndex+1 <= lastIndex ? numsSorted[midIndex+1] : -1\n            \n            if midIndexValue == leftValue || midIndexValue == rightValue { return midIndexValue } // Found answer\n            \n            let leftSideDuplicateValue = findDuplicateUsingRecursiveBinarySearch(startIndex, midIndex-1) // Find left side\n            if leftSideDuplicateValue != -1 {\n                return leftSideDuplicateValue\n            } else {\n                return findDuplicateUsingRecursiveBinarySearch(midIndex+1, endIndex) // Find right side\n            }\n        }\n        \n        return findDuplicateUsingRecursiveBinarySearch(0, lastIndex)\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number"}