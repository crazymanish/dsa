{"id":691839794,"lang":"swift","time":"2Â months","timestamp":1651523706,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/691839794/","is_pending":"Not Pending","title":"First Bad Version","memory":"13.9 MB","code":"/**\n * The knows API is defined in the parent class VersionControl.\n *     func isBadVersion(_ version: Int) -> Bool{}\n */\n\nclass Solution : VersionControl {\n    func firstBadVersion(_ n: Int) -> Int {\n        func findFirstBadVersionUsingRecursiveBinarySearch(_ startVersion: Int, _ endVersion: Int) -> Int {\n            if startVersion > endVersion { return -1 } // Base case for not-found\n            \n            let midVersion = startVersion + (endVersion-startVersion) / 2\n            let isMidVersionBad = isBadVersion(midVersion) // Using existing VersionControl API\n            \n            if isMidVersionBad && midVersion == 1 { return midVersion } // Found answer, First itself is Bad\n            \n            if isMidVersionBad {\n                let previousVersion = midVersion-1\n                if previousVersion > 0 && isBadVersion(previousVersion) == false { // Found answer\n                    return midVersion\n                } else { // Find BadVersion in left side\n                    return findFirstBadVersionUsingRecursiveBinarySearch(startVersion, midVersion-1)\n                }\n            } else { // Find BadVersion in right side\n                return findFirstBadVersionUsingRecursiveBinarySearch(midVersion+1, endVersion)\n            }\n        }\n        \n        return findFirstBadVersionUsingRecursiveBinarySearch(1, n)\n    }\n}","compare_result":"1111111111111111111111","title_slug":"first-bad-version"}