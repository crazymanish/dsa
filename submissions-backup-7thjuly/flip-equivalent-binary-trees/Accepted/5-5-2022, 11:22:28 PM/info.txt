{"id":693913103,"lang":"swift","time":"2Â months","timestamp":1651785748,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/693913103/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"14.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func flipEquiv(_ root1: TreeNode?, _ root2: TreeNode?) -> Bool {\n        if root1 == nil && root2 == nil { return true }\n        if root1 == nil || root2 == nil { return false }\n        if root1!.val != root2!.val { return false }\n        \n        // Assume, there is flip\n        let isLeftFlipEquiv = flipEquiv(root1!.left, root2!.right)\n        let isRightFlipEquiv = flipEquiv(root1!.right, root2!.left)\n        let isFlipEquiv = isLeftFlipEquiv && isRightFlipEquiv\n        \n        // Assume, no flip\n        let isLeftNotFlipEquiv = flipEquiv(root1!.left, root2!.left)\n        let isRightNotFlipEquiv = flipEquiv(root1!.right, root2!.right)\n        let isNotFlipEquiv = isLeftNotFlipEquiv && isRightNotFlipEquiv\n        \n        return isFlipEquiv || isNotFlipEquiv\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-equivalent-binary-trees"}