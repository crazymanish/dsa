{"id":670914350,"lang":"swift","time":"3 months, 1 week","timestamp":1648718753,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/670914350/","is_pending":"Not Pending","title":"Group Anagrams","memory":"N/A","code":"class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        if strs.count == 1 { return [strs] }\n        \n        var hashMap: [String : [String]] = [:]\n        \n        for str in strs {\n            var isGroupFound = false\n            for (key, value) in hashMap {\n                if isAnagram(str, key) {\n                    hashMap[key] = value + [str]\n                    isGroupFound = true\n                    break\n                }\n            }\n            \n            if isGroupFound == false { hashMap[str] = [str] }\n        }\n        \n        var output: [[String]] = []\n        for (_, value) in hashMap {\n            output.append(value.sorted())\n        }\n        \n        return output\n    }\n\n    private func isAnagram(_ s: String, _ t: String) -> Bool {\n        var hashMapS = hashMap(s)\n        var hashMapT = hashMap(t)\n        \n        var isHashAnagram = true\n        isHashAnagram = isAnagram(hashMapS, hashMapT)\n        \n        if isHashAnagram {\n            isHashAnagram = isAnagram(hashMapT, hashMapS)\n        }\n        \n        return isHashAnagram\n    }\n    \n    private func isAnagram(\n        _ hashMapS: [Character : Int], \n        _ hashMapT: [Character : Int]) -> Bool {\n        var isAnagram = true\n        \n        for (key, value) in hashMapT {\n            let sValue = hashMapS[key] ?? -1\n            if sValue != value {\n                isAnagram = false\n                break\n            }\n        }\n        \n        return isAnagram\n    }\n    \n    private func hashMap(_ text: String) -> [Character : Int] {\n        var hashMap: [Character : Int] = [:]\n        \n        for char in text {\n            let hashMapValue = hashMap[char] ?? 0\n            hashMap[char] = hashMapValue + 1\n        }\n        \n        return hashMap\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000","title_slug":"group-anagrams"}