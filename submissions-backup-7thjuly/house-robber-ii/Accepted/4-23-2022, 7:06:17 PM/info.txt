{"id":686078414,"lang":"swift","time":"2 months, 2 weeks","timestamp":1650733577,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/686078414/","is_pending":"Not Pending","title":"House Robber II","memory":"14.1 MB","code":"class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        let houseCount = nums.count\n        \n        if houseCount == 1 { return nums[0] }\n        \n        /*\n        We can divide this problem to two sub problems:\n        Subproblem 1: rob house index-0 <-to-> second-last index \n        Subproblem 2: rob house index-1 <-to-> last index \n        And find the bigger one of these two sub problems.\n        */\n        let robWithHouse0 = rob(nums, 0, nums.count-2)\n        let robWithHouse1 = rob(nums, 1, nums.count-1)\n        \n        return max(robWithHouse0, robWithHouse1)\n    }\n\n    func rob(_ nums: [Int], _ startIndex: Int, _ endIndex: Int) -> Int {\n        var dpCache = Array(repeating: 0, count: nums.count)\n        var currentHouseIndex = startIndex\n        \n        while currentHouseIndex <= endIndex {\n            let currentHouseMoney = nums[currentHouseIndex]\n            \n            var previousHouseMoney = 0\n            if currentHouseIndex-1 >= 0 { previousHouseMoney = dpCache[currentHouseIndex-1] }\n            \n            var previousPreviousHouseMoney = 0\n            if currentHouseIndex-2 >= 0 { previousPreviousHouseMoney = dpCache[currentHouseIndex-2] }\n            \n            let maxRobMoney = max(currentHouseMoney+previousPreviousHouseMoney, previousHouseMoney)\n            dpCache[currentHouseIndex] = maxRobMoney\n            \n            currentHouseIndex += 1\n        }\n        \n        return dpCache[endIndex]\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-ii"}