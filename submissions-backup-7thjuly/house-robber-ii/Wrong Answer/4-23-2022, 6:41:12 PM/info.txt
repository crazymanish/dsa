{"id":686065889,"lang":"swift","time":"2 months, 2 weeks","timestamp":1650732072,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/686065889/","is_pending":"Not Pending","title":"House Robber II","memory":"N/A","code":"class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        let houseCount = nums.count\n        \n        var dpCache = Array(repeating: -1, count: houseCount)\n        \n        for (currentHouseIndex, currentHouseMoney) in nums.enumerated() {\n            var previousHouseMoney = 0\n            if currentHouseIndex-1 >= 0 { previousHouseMoney = dpCache[currentHouseIndex-1] }\n            \n            var previousPreviousHouseMoney = 0\n            if currentHouseIndex-2 >= 0 { previousPreviousHouseMoney = dpCache[currentHouseIndex-2] }\n            \n            let maxRobMoney: Int\n            if houseCount > 1 && currentHouseIndex+1 == houseCount && houseCount % 2 != 0 { // last house with ODD count\n                maxRobMoney = max(currentHouseMoney-nums[0]+previousPreviousHouseMoney, previousHouseMoney)\n            } else {\n                maxRobMoney = max(currentHouseMoney+previousPreviousHouseMoney, previousHouseMoney)\n            }\n            \n            dpCache[currentHouseIndex] = maxRobMoney\n        }\n        \n        return dpCache.last!\n    }\n}\n","compare_result":"111111111111111111111110111111110111101111110100000100100001010101001100001","title_slug":"house-robber-ii"}