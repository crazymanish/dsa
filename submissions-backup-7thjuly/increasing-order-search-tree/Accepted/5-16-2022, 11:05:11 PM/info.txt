{"id":700961870,"lang":"swift","time":"1 month, 3 weeks","timestamp":1652735111,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/700961870/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"14.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\n\nclass Queue {\n    private var array: [Int] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: Int) {\n        array.append(value)\n    }\n\n    func deQueue() -> Int? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n\nclass Solution {\n    func increasingBST(_ root: TreeNode?) -> TreeNode? {\n        if root == nil { return nil }\n\n        let queue = Queue()\n        getAllBSTNodes(root, queue: queue)\n\n        var outputNode: TreeNode? = TreeNode(-1)\n        let outputRootNode = outputNode\n\n        while queue.isEmpty == false {\n            let newNode = TreeNode(queue.deQueue()!)\n            outputNode?.right = newNode\n            outputNode = outputNode?.right\n        }\n\n        return outputRootNode?.right\n    }\n\n    func getAllBSTNodes(_ root: TreeNode?, queue: Queue) {\n        if root == nil { return }\n\n        getAllBSTNodes(root?.left, queue: queue)\n        queue.enQueue(root!.val)\n        getAllBSTNodes(root?.right, queue: queue)\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}