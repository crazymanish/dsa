{"id":702014286,"lang":"swift","time":"1 month, 2 weeks","timestamp":1652868200,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/702014286/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"14.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func invertTree(_ root: TreeNode?) -> TreeNode? {\n        if root == nil { return nil }\n        \n        let leftInvertTree = invertTree(root?.left)\n        let rightInvertTree = invertTree(root?.right)\n\n        return TreeNode(root!.val, rightInvertTree, leftInvertTree)\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree"}