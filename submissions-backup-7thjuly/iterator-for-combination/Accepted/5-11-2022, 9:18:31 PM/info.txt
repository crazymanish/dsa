{"id":697630498,"lang":"swift","time":"1 month, 3 weeks","timestamp":1652296711,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/697630498/","is_pending":"Not Pending","title":"Iterator for Combination","memory":"15.4 MB","code":"\nclass CombinationIterator {\n    private var allCombinations: [String] = []\n    \n    init(_ characters: String, _ combinationLength: Int) {\n        let inputCharacters = Array(characters)\n        let lastCharacterIndex = inputCharacters.count-1\n        \n        var currentCombination: [String] = []\n        \n        func findCombinations(_ currentIndex: Int) {\n            if currentCombination.count == combinationLength {\n                allCombinations.append(currentCombination.joined())\n                return\n            }\n\n            if currentIndex > lastCharacterIndex { return }\n\n            for index in currentIndex...lastCharacterIndex {\n                let value = String(inputCharacters[index])\n                \n                currentCombination.append(value)\n\n                findCombinations(index+1)\n\n                currentCombination.removeLast() // backtracking\n            }\n        }\n        \n        findCombinations(0)\n    }\n    \n    func next() -> String { allCombinations.removeFirst() }\n    \n    func hasNext() -> Bool { allCombinations.isEmpty == false }\n}\n\n/**\n * Your CombinationIterator object will be instantiated and called as such:\n * let obj = CombinationIterator(characters, combinationLength)\n * let ret_1: String = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */\n","compare_result":"11111111111111111","title_slug":"iterator-for-combination"}