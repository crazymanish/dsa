{"id":702396717,"lang":"swift","time":"1 month, 2 weeks","timestamp":1652916005,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/702396717/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"14.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func leafSimilar(_ root1: TreeNode?, _ root2: TreeNode?) -> Bool {\n        guard let root1 = root1, let root2 = root2 else { return false }\n\n        let leftLeafNodes = leafNodes(root1)\n        let rightLeafNodes = leafNodes(root2)\n\n        return leftLeafNodes == rightLeafNodes\n    }\n\n    private func leafNodes(_ root: TreeNode?) -> [Int] {\n        guard let rootNode = root else { return [] }\n\n        if rootNode.left == nil && rootNode.right == nil { return [rootNode.val] }\n\n        let leftLeafNodes = leafNodes(rootNode.left)\n        let rightLeafNodes = leafNodes(rootNode.right)\n\n        return leftLeafNodes + rightLeafNodes\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"leaf-similar-trees"}