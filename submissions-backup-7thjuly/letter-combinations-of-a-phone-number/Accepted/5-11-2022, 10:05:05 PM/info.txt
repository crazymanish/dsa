{"id":697653215,"lang":"swift","time":"1 month, 3 weeks","timestamp":1652299505,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/697653215/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"14.4 MB","code":"class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        if digits.count == 0 { return [] }\n        \n        let lettersHashMap: [Character: [Character]] = [\n\t        \"2\": [\"a\",\"b\",\"c\"],\n\t        \"3\": [\"d\",\"e\",\"f\"],\n\t        \"4\": [\"g\",\"h\",\"i\"],\n\t        \"5\": [\"j\",\"k\",\"l\"],\n\t        \"6\": [\"m\",\"n\",\"o\"],\n\t        \"7\": [\"p\",\"q\",\"r\", \"s\"],\n\t        \"8\": [\"t\",\"u\",\"v\"],\n\t        \"9\": [\"w\",\"x\",\"y\", \"z\"]\n        ]\n        \n        let digitCharacters = Array(digits)\n        let combinationLength = digits.count\n        let lastDigitIndex = digits.count-1\n        \n        var allCombinations: [String] = []\n        var currentCombination: [String] = []\n        \n        func findCombinations(_ currentIndex: Int) {\n            if currentCombination.count == combinationLength {\n                allCombinations.append(currentCombination.joined())\n                return\n            }\n\n            if currentIndex > lastDigitIndex { return }\n\n            for index in currentIndex...lastDigitIndex {\n                let digit = digitCharacters[index]\n                let letters = lettersHashMap[digit] ?? []\n                \n                for character in letters {\n                    let value = String(character)\n                    \n                    currentCombination.append(value)\n                    findCombinations(index+1)\n                    currentCombination.removeLast() // backtracking\n                }\n            }\n        }\n        \n        findCombinations(0)\n        return allCombinations\n    }\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number"}