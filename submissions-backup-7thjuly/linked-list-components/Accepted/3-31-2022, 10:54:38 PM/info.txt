{"id":671216771,"lang":"swift","time":"3 months, 1 week","timestamp":1648760078,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/671216771/","is_pending":"Not Pending","title":"Linked List Components","memory":"16.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func numComponents(_ head: ListNode?, _ nums: [Int]) -> Int {\n        var numsHashMap: [Int : Bool] = [:]\n        for num in nums { numsHashMap[num] = true }\n        \n        var output = 0\n        var previosNode: ListNode? = nil\n        var currentNode = head\n\n        while currentNode != nil {\n            let curretNodeValue = currentNode!.val\n            \n            if previosNode == nil {\n                if numsHashMap[curretNodeValue] != nil { output += 1 }  \n            } else {\n                let previousNodeValue = previosNode!.val\n                if numsHashMap[previousNodeValue] == nil && numsHashMap[curretNodeValue] != nil { output += 1 } \n            }\n            \n            previosNode = currentNode\n            currentNode = currentNode?.next\n        }\n        \n        return output\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"linked-list-components"}