{"id":682019212,"lang":"swift","time":"2 months, 3 weeks","timestamp":1650179956,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/682019212/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    // Variation of LCS\n    // 1143. Longest Common Subsequence\n    // https://leetcode.com/problems/longest-common-subsequence/\n    func lengthOfLIS(_ nums: [Int]) -> Int {\n        let rows = nums\n        let columns = nums\n        \n        let rowsCount = rows.count\n        let columnsCount = columns.count\n        \n        // Init with 1 instead of 0\n        var dpMatrix = Array(repeating: Array(repeating: 1, count: columnsCount+1), count: rowsCount+1)\n        \n        for rowIndex in 1...rowsCount {\n            let currentRowChar = rows[rowIndex-1]\n            for columnIndex in 2...columnsCount {\n                let currentColumnChar = columns[columnIndex-1]\n                let previousLCS = dpMatrix[rowIndex-1][columnIndex-1]\n                \n                // Only this condition is changed compared to original LCS\n                if currentColumnChar > currentRowChar && currentColumnChar > columns[columnIndex-2] {\n                    dpMatrix[rowIndex][columnIndex] = 1 + previousLCS\n                } else {\n                    let previousRowLCS = dpMatrix[rowIndex-1][columnIndex]\n                    let previousColumnLCS = dpMatrix[rowIndex][columnIndex-1]\n                    let previousLCS = max(previousRowLCS, previousColumnLCS)\n                    \n                    dpMatrix[rowIndex][columnIndex] = previousLCS\n                }\n            }\n        }\n        \n        return dpMatrix[rowsCount][columnsCount]\n    }\n}","compare_result":"111000000000000000000000000000000000000000000000000000","title_slug":"longest-increasing-subsequence"}