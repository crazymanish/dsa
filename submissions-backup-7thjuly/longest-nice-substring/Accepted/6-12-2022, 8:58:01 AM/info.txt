{"id":720266603,"lang":"swift","time":"3 weeks, 4 days","timestamp":1655017081,"status_display":"Accepted","runtime":"893 ms","url":"/submissions/detail/720266603/","is_pending":"Not Pending","title":"Longest Nice Substring","memory":"13.9 MB","code":"class Solution {\n    func longestNiceSubstring(_ s: String) -> String {\n        let slidingWindow = SlidingWindow(s)\n        let inputStringCount = s.count\n        var longestNiceSubstring = \"\"\n\n        while slidingWindow.endIndex < inputStringCount {\n            let currentWindowString = String(slidingWindow.value)\n            let currentWindowStringCount = currentWindowString.count\n\n            if currentWindowString.isNiceString && currentWindowStringCount > longestNiceSubstring.count  {\n                longestNiceSubstring = currentWindowString\n            }\n\n            // We reached till the end for searching the longest nice string\n            if slidingWindow.endIndex == (inputStringCount - 1) {\n                // Move sliding window by 1 from start &\n                // reset the endIndex to same as startIndex\n                slidingWindow.startIndex += 1\n                slidingWindow.endIndex = slidingWindow.startIndex - 1\n            }\n\n            slidingWindow.endIndex += 1\n        }\n\n        return longestNiceSubstring\n    }\n}\n\nprivate extension String {\n    var isNiceString: Bool {\n        Double(Set(self.lowercased()).count) == (Double(Set(self).count) / 2.0)\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-nice-substring"}