{"id":681686508,"lang":"swift","time":"2 months, 3 weeks","timestamp":1650137829,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/681686508/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"21.9 MB","code":"class Solution {\n    func longestPalindromeSubseq(_ s: String) -> Int {\n        let sReversed = String(s.reversed())\n        \n        return longestCommonSubsequence(s, sReversed)\n    }\n\n    // Using Dynamic programming with Top-down matrix\n    // Same code: 1143. Longest Common Subsequence\n    // https://leetcode.com/problems/longest-common-subsequence/\n    func longestCommonSubsequence(_ text1: String, _ text2: String) -> Int {\n        let rows = Array(text1)\n        let columns = Array(text2)\n        \n        let rowsCount = rows.count\n        let columnsCount = columns.count\n        \n        var dpMatrix = Array(repeating: Array(repeating: 0, count: columnsCount+1), count: rowsCount+1)\n        \n        for rowIndex in 1...rowsCount {\n            let currentRowChar = rows[rowIndex-1]\n            for columnIndex in 1...columnsCount {\n                let currentColumnChar = columns[columnIndex-1]\n                \n                if currentRowChar == currentColumnChar {\n                    let previousLCS = dpMatrix[rowIndex-1][columnIndex-1]\n                    dpMatrix[rowIndex][columnIndex] = 1 + previousLCS\n                } else {\n                    let previousRowLCS = dpMatrix[rowIndex-1][columnIndex]\n                    let previousColumnLCS = dpMatrix[rowIndex][columnIndex-1]\n                    let previousLCS = max(previousRowLCS, previousColumnLCS)\n                    \n                    dpMatrix[rowIndex][columnIndex] = previousLCS\n                }\n            }\n        }\n        \n        return dpMatrix[rowsCount][columnsCount]\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence"}