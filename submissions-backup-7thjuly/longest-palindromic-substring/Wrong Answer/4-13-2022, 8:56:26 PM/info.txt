{"id":679773039,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649876186,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/679773039/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        var longestPalindrome = \"\"\n        let sArray = Array(s)\n        \n        for index in 0..<sArray.count {\n            let currentPalindrome = findPalindrome(sArray, index)\n            \n            if currentPalindrome.count > longestPalindrome.count {\n                longestPalindrome = currentPalindrome\n            }\n        }\n        \n        return longestPalindrome\n    }\n    \n    private func findPalindrome(_ sArray: [Character], _ centerIndex: Int) -> String {\n        let sArrayCount = sArray.count\n        let isEvenString = sArrayCount % 2 == 0\n        \n        var currentPalindrome = isEvenString ? \"\" : String(sArray[centerIndex])\n        var leftPointer = isEvenString ? centerIndex : centerIndex - 1\n        var rightPointer = centerIndex + 1\n            \n        while leftPointer >= 0 && rightPointer < sArray.count {\n            let leftValue = sArray[leftPointer]\n            let rightValue = sArray[rightPointer]\n                \n            if leftValue != rightValue {\n                break\n            } else {\n                currentPalindrome = String(leftValue) + currentPalindrome + String(rightValue)\n                leftPointer -= 1\n                rightPointer += 1\n            }\n        }\n        \n        return currentPalindrome\n    }\n}","compare_result":"111011001100111111110110100100111101111111101101101101000001000101011011011111100000100101111111111111111111111100111011010010101011111110101011101011111110111101111110101010101111","title_slug":"longest-palindromic-substring"}