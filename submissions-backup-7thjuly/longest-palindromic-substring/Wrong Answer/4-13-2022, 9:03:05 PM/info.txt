{"id":679776364,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649876585,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/679776364/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        var longestPalindrome = \"\"\n        let sArray = Array(s)\n        \n        for index in 0..<sArray.count {\n            let currentPalindrome = findPalindrome(sArray, index)\n            \n            if currentPalindrome.count > longestPalindrome.count {\n                longestPalindrome = currentPalindrome\n            }\n        }\n        \n        return longestPalindrome\n    }\n    \n    private func findPalindrome(_ sArray: [Character], _ centerIndex: Int) -> String {\n        let sArrayCount = sArray.count\n        let isEvenString = sArrayCount % 2 == 0\n        \n        var currentPalindrome = String(sArray[centerIndex])\n        var leftPointer = isEvenString ? centerIndex : centerIndex - 1\n        var rightPointer = centerIndex + 1\n            \n        while leftPointer >= 0 && rightPointer < sArrayCount {\n            let leftValue = sArray[leftPointer]\n            let rightValue = sArray[rightPointer]\n                \n            if leftValue != rightValue {\n                break\n            } else {\n                if isEvenString {\n                    currentPalindrome = String(leftValue) + String(rightValue)       \n                } else {\n                    currentPalindrome = String(leftValue) + currentPalindrome + String(rightValue)\n                }\n\n                leftPointer -= 1\n                rightPointer += 1\n            }\n        }\n        \n        return currentPalindrome\n    }\n}","compare_result":"111111001000111111110110100100101101111011001101100101000001000100011010010001000000100101010100000000000000000000000000000000000001000100000000000000010100000000100000000000001110","title_slug":"longest-palindromic-substring"}