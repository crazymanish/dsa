{"id":663790241,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647792030,"status_display":"Accepted","runtime":"684 ms","url":"/submissions/detail/663790241/","is_pending":"Not Pending","title":"Longest Subarray of 1's After Deleting One Element","memory":"17.5 MB","code":"class Solution {\n    private var slidingWindow: SlidingWindow<[Int]>!\n    private var canIgnoreZero = true\n    private var currentWindowConsecutiveOnes = 0\n    private var maximumConsecutiveOnes = Int.min\n\n    private var slidingWindowFirstValue: Int { Array(slidingWindow.startIndexValue).first! }\n    private var slidingWindowLastValue: Int { Array(slidingWindow.endIndexValue).first! }\n\n    func longestSubarray(_ nums: [Int]) -> Int {\n        slidingWindow = SlidingWindow(nums)\n        let inputNumsCount = nums.count\n        var zeroAdjustment = 1\n\n        while slidingWindow.endIndex < inputNumsCount {\n            if slidingWindowLastValue == 1 {\n                handleWhenValueIsOne()\n            } else {\n                zeroAdjustment = 0\n                handleWhenValueIsZero()\n            }\n        }\n\n        maximumConsecutiveOnes = (max(maximumConsecutiveOnes, currentWindowConsecutiveOnes)) - zeroAdjustment\n\n        return maximumConsecutiveOnes\n    }\n\n    // if sliding value is coming as 1, don't do anything just increment the ConsecutiveOnes\n    private func handleWhenValueIsOne() {\n        currentWindowConsecutiveOnes += 1\n        slidingWindow.endIndex += 1 // Slide window by one from end.\n    }\n\n    private func handleWhenValueIsZero() {\n        // lets see if have chance to make 0 into 1 first using K(flipPossibleCount) value\n        if canIgnoreZero {\n            canIgnoreZero = false\n            slidingWindow.endIndex += 1 // Slide window by one from end.\n        } else {\n            // We found maximum ConsecutiveOnes in this sliding-window\n            maximumConsecutiveOnes = max(maximumConsecutiveOnes, currentWindowConsecutiveOnes)\n\n            while slidingWindowFirstValue != 0 {\n                // Adjust currentWindowConsecutiveOnes, before sliding next window\n                currentWindowConsecutiveOnes -= 1\n\n                slidingWindow.startIndex += 1 // Slide window by one from start.\n            }\n\n            canIgnoreZero = true\n            slidingWindow.startIndex += 1 // Slide window by one from start.\n        }\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var size: Int { endIndex - startIndex + 1 }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element"}