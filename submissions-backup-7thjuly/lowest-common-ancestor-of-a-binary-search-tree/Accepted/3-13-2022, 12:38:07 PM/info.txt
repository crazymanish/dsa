{"id":659113418,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647171487,"status_display":"Accepted","runtime":"175 ms","url":"/submissions/detail/659113418/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"14.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Solution {\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\n        guard let root = root, let p = p, let q = q else { return nil }\n\n        if root.val > p.val && root.val > q.val {\n            return lowestCommonAncestor(root.left, p, q)\n        } else if root.val < p.val && root.val < q.val {\n            return lowestCommonAncestor(root.right, p, q)\n        } else {\n            return root\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}