{"id":661983845,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647542666,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/661983845/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"14.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func lcaDeepestLeaves(_ root: TreeNode?) -> TreeNode? {\n        guard let root = root else { return nil }\n        let maximumDepth = calculateDepth(root) - 1\n\n        return findLcaNode(root, 0, maximumDepth)\n    }\n\n    private func calculateDepth(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n\n        let leftHeight = calculateDepth(root.left)\n        let rightHeight = calculateDepth(root.right)\n\n        return max(leftHeight, rightHeight) + 1\n    }\n\n    private func findLcaNode(_ root: TreeNode?, _ currentDepth: Int, _ maximumDepth: Int) -> TreeNode? {\n        guard let currentNode = root else { return nil }\n\n        if currentDepth == maximumDepth { return currentNode }\n\n        let newDepth = currentDepth + 1\n        let leftLcaNode = findLcaNode(currentNode.left, newDepth, maximumDepth)\n        let rightLcaNode = findLcaNode(currentNode.right, newDepth, maximumDepth)\n\n        if leftLcaNode != nil && rightLcaNode != nil {\n            return currentNode\n        } else if leftLcaNode != nil {\n            return leftLcaNode\n        } else {\n            return rightLcaNode\n        }\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves"}