{"id":723490140,"lang":"swift","time":"3Â weeks","timestamp":1655364255,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/723490140/","is_pending":"Not Pending","title":"Maximize the Confusion of an Exam","memory":"15.8 MB","code":"class Solution {\n    private var slidingWindow: SlidingWindow!\n    private var flipPossibleCount: Int!\n    private var currentWindowConsecutiveOnes = 0\n    private var maximumConsecutiveOnes = Int.min\n\n    private var slidingWindowFirstValue: String { String(slidingWindow.startIndexValue) }\n    private var slidingWindowLastValue: String { String(slidingWindow.endIndexValue) }\n\n    func maxConsecutiveAnswers(_ answerKey: String, _ k: Int) -> Int {\n        let maximumConsecutiveOnesWithT = longestOnes(answerKey, k, \"T\")\n        let maximumConsecutiveOnesWithF = longestOnes(answerKey, k, \"F\")\n\n        return max(maximumConsecutiveOnesWithT, maximumConsecutiveOnesWithF)\n    }\n\n    private func longestOnes(_ answerKey: String, _ k: Int, _ answerKeyType: String) -> Int {\n        slidingWindow = SlidingWindow(Array(answerKey))\n        flipPossibleCount = k\n        let inputNumsCount = answerKey.count\n        currentWindowConsecutiveOnes = 0\n        maximumConsecutiveOnes = Int.min\n\n        while slidingWindow.endIndex < inputNumsCount {\n            if slidingWindowLastValue == answerKeyType {\n                handleWhenValueIsOne()\n            } else {\n                let type = answerKeyType == \"T\" ? \"F\" : \"T\"\n                handleWhenValueIsZero(type)\n            }\n        }\n\n        maximumConsecutiveOnes = max(maximumConsecutiveOnes, currentWindowConsecutiveOnes)\n\n        return maximumConsecutiveOnes\n    }\n\n    // if sliding value is coming as 1, don't do anything just increment the ConsecutiveOnes\n    private func handleWhenValueIsOne() {\n        currentWindowConsecutiveOnes += 1\n        slidingWindow.endIndex += 1 // Slide window by one from end.\n    }\n\n    private func handleWhenValueIsZero(_ answerKeyType: String) {\n        // lets see if have chance to make 0 into 1 first using K(flipPossibleCount) value\n        if flipPossibleCount > 0 {\n            flipPossibleCount -= 1\n            currentWindowConsecutiveOnes += 1\n            slidingWindow.endIndex += 1 // Slide window by one from end.\n        } else if flipPossibleCount == 0 {\n            // We found maximum ConsecutiveOnes in this sliding-window\n            maximumConsecutiveOnes = max(maximumConsecutiveOnes, currentWindowConsecutiveOnes)\n\n            // Adjust currentWindowConsecutiveOnes, before sliding next window\n            currentWindowConsecutiveOnes -= 1\n\n            if slidingWindowFirstValue == answerKeyType {\n                flipPossibleCount += 1\n            }\n\n            slidingWindow.startIndex += 1 // Slide window by one from start.\n        }\n    }\n}\n\nclass SlidingWindow {\n    let array: [Character]\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var size: Int { endIndex - startIndex + 1 }\n    var startIndexValue: Character { array[startIndex] }\n    var endIndexValue: Character { array[endIndex] }\n\n    init(_ array: [Character], _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.array = array\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-the-confusion-of-an-exam"}