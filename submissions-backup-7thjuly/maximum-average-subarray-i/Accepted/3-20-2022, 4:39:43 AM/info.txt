{"id":663450489,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647747583,"status_display":"Accepted","runtime":"1971 ms","url":"/submissions/detail/663450489/","is_pending":"Not Pending","title":"Maximum Average Subarray I","memory":"18.7 MB","code":"class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        if k < 1 { return 0 }\n\n        let slidingWindow = SlidingWindow(nums)\n        let inputNumsCount = nums.count\n        let windowSize = k\n        var currentSlidingWindowSum: Double = 0\n        var maxAverage: Double = Double(Int.min)\n\n        while slidingWindow.endIndex < inputNumsCount {\n            let lastValue = Array(slidingWindow.endIndexValue).first!\n            currentSlidingWindowSum += Double(lastValue)\n\n            if slidingWindow.value.count == windowSize {\n                let currentWindowAverage = currentSlidingWindowSum / Double(windowSize)\n                maxAverage = max(maxAverage, currentWindowAverage)\n\n                // Before sliding the window, adjust the sliding-sum\n                let startValue = Array(slidingWindow.startIndexValue).first!\n                currentSlidingWindowSum -= Double(startValue)\n                slidingWindow.startIndex += 1\n            }\n\n            slidingWindow.endIndex += 1\n        }\n\n        return maxAverage\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-i"}