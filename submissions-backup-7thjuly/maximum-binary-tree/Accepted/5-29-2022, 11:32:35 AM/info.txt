{"id":709684993,"lang":"swift","time":"1 month, 1 week","timestamp":1653816755,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/709684993/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"14.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var root: TreeNode? = nil\n\n    func constructMaximumBinaryTree(_ nums: [Int]) -> TreeNode? {\n        if nums.isEmpty { return nil }\n\n        constructMaximumBinaryTree(nums, 0, nums.count-1)\n\n        return root\n    }\n\n    @discardableResult\n    private func constructMaximumBinaryTree(_ nums: [Int], _ leftIndex: Int, _ rightIndex: Int) -> TreeNode? {\n        if leftIndex > rightIndex { return nil }\n\n        let maximumValueIndex = findMaximumIndex(nums, leftIndex, rightIndex)\n\n        let maximumValueNode = TreeNode(nums[maximumValueIndex])\n        if root == nil { root = maximumValueNode }\n\n        maximumValueNode.left = constructMaximumBinaryTree(nums, leftIndex, maximumValueIndex-1)\n        maximumValueNode.right = constructMaximumBinaryTree(nums, maximumValueIndex+1, rightIndex)\n\n        return maximumValueNode\n    }\n\n    private func findMaximumIndex(_ nums: [Int], _ leftIndex: Int, _ rightIndex: Int) -> Int {\n        var maximumValueIndex = leftIndex\n\n        for currentIndex in leftIndex...rightIndex {\n            if nums[currentIndex] > nums[maximumValueIndex] {\n                maximumValueIndex = currentIndex\n            }\n        }\n\n        return maximumValueIndex\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree"}