{"id":701717337,"lang":"swift","time":"1 month, 2 weeks","timestamp":1652828218,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/701717337/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"14.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    var maxDepth = 0\n    \n    func maxDepth(_ root: TreeNode?) -> Int {\n        findMaxDepth(root, 0)\n        \n        return maxDepth\n    }\n    \n    private func findMaxDepth(_ root: TreeNode?, _ currentDepth: Int) {\n        if root == nil { return }\n        \n        let newCurrentDepth = currentDepth + 1\n\n        if root?.left == nil && root?.right == nil {\n            maxDepth = max(maxDepth, newCurrentDepth)\n        } else {\n            findMaxDepth(root?.left, newCurrentDepth)\n            findMaxDepth(root?.right, newCurrentDepth)\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}