{"id":694510590,"lang":"swift","time":"2Â months","timestamp":1651869130,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/694510590/","is_pending":"Not Pending","title":"Maximum Depth of N-ary Tree","memory":"14.4 MB","code":"/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func maxDepth(_ root: Node?) -> Int {\n        guard let rootNode = root else { return 0 }\n        \n        let queue = Queue()\n        queue.enQueue(rootNode)\n        \n        var maxDepth = 0\n        \n        while queue.isEmpty == false {\n            let queueCount = queue.count\n            \n            for _ in 0..<queueCount {\n                let currentNode = queue.deQueue()!\n                \n                for childNode in currentNode.children {\n                    queue.enQueue(childNode)\n                }\n            }\n            \n            maxDepth += 1\n        }\n        \n        return maxDepth\n    }\n}\n\nclass Queue {\n    private var array: [Node] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    var count: Int { array.count }\n    \n    func enQueue(_ element: Node) {\n        array.append(element)\n    }\n    \n    func deQueue() -> Node? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"maximum-depth-of-n-ary-tree"}