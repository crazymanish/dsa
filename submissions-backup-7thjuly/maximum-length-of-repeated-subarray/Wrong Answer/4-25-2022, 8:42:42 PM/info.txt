{"id":687408561,"lang":"swift","time":"2 months, 1 week","timestamp":1650912162,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/687408561/","is_pending":"Not Pending","title":"Maximum Length of Repeated Subarray","memory":"N/A","code":"class Solution {\n    func findLength(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        let rowsCount = nums1.count\n        let columnsCount = nums2.count\n        \n        var dpCache = Array(repeating: Array(repeating: 0, count: columnsCount), count: rowsCount)\n        \n        for row in 0..<rowsCount {\n            for column in 0..<columnsCount {\n                var previousLength = 0\n                \n                if row > 0 && column > 0 {\n                    previousLength = dpCache[row-1][column-1]\n                }\n                \n                dpCache[row][column] = previousLength\n                \n                if nums1[row] == nums2[column] {\n                    dpCache[row][column] += 1\n                }\n            }\n        }\n        \n        // We have answer in last row (Max element in last row)\n        let lastRow = dpCache[rowsCount-1]\n        var output = 0\n        for element in lastRow { output = max(output, element) }\n        \n        return output\n    }\n}","compare_result":"110101111111110000101110010000000001010000000000000001010","title_slug":"maximum-length-of-repeated-subarray"}