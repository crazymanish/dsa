{"id":713493580,"lang":"swift","time":"1Â month","timestamp":1654256310,"status_display":"Accepted","runtime":"1354 ms","url":"/submissions/detail/713493580/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"15.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func maxLevelSum(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        var maxLevelSum = 0\n        var currentLevel = 1\n        var maxCurrentSum = Int64.min\n        let queue = Queue()\n        queue.enQueue(root)\n        \n        while queue.isEmpty == false {\n            var currentSum: Int64 = 0\n            let queueCount = queue.count\n            \n            for _ in 0..<queueCount {\n                let currentNode = queue.deQueue()!\n                \n                currentSum += Int64(currentNode.val)\n                \n                if let leftNode = currentNode.left { queue.enQueue(leftNode) }\n                if let rightNode = currentNode.right { queue.enQueue(rightNode) }   \n            }\n            \n            if currentSum > maxCurrentSum {\n                maxCurrentSum = currentSum\n                maxLevelSum = currentLevel\n            }\n            currentLevel += 1\n        }\n        \n        return maxLevelSum\n    }\n}\n\nclass Queue {\n    private var array: [TreeNode] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    var count: Int { array.count }\n    \n    func enQueue(_ element: TreeNode) {\n        array.append(element)\n    }\n    \n    func deQueue() -> TreeNode? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree"}