{"id":663898984,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647803477,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/663898984/","is_pending":"Not Pending","title":"Maximum Number of Vowels in a Substring of Given Length","memory":"N/A","code":"class Solution {\n    private var slidingWindow: SlidingWindow<String>!\n    private var slidingWindowSize = 0\n    private var currentSlidingWindowVowelsLength = 0\n    private var maximumVowelsLength = Int.min\n\n    private var vowelsHashMap = [\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true]\n\n    private var slidingWindowFirstValue: String { String(slidingWindow.startIndexValue) }\n    private var slidingWindowLastValue: String { String(slidingWindow.endIndexValue) }\n\n    func maxVowels(_ s: String, _ k: Int) -> Int {\n        slidingWindow = SlidingWindow(s)\n        slidingWindowSize = k\n\n        while slidingWindow.endIndex < s.count {\n            if isVowel(slidingWindowLastValue) {\n                handleWhenValueIsVowel()\n            }\n\n            if slidingWindow.size == slidingWindowSize {\n                handleWhenWindowSizeIsMet()\n            }\n\n            // Slide window by one from end.\n            slidingWindow.endIndex += 1\n        }\n\n        return maximumVowelsLength\n    }\n\n    private func isVowel(_ string: String) -> Bool { vowelsHashMap[string] != nil }\n\n    private func handleWhenValueIsVowel() {\n        currentSlidingWindowVowelsLength += 1\n    }\n\n    private func handleWhenWindowSizeIsMet() {\n        maximumVowelsLength = max(maximumVowelsLength, currentSlidingWindowVowelsLength)\n\n        if isVowel(slidingWindowFirstValue) {\n            currentSlidingWindowVowelsLength -= 1\n        }\n\n        slidingWindow.startIndex += 1 // Slide window by one from start.\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var size: Int { endIndex - startIndex + 1 }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"maximum-number-of-vowels-in-a-substring-of-given-length"}