{"id":673853261,"lang":"swift","time":"3Â months","timestamp":1649099678,"status_display":"Accepted","runtime":"1845 ms","url":"/submissions/detail/673853261/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"26.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func pairSum(_ head: ListNode?) -> Int {\n        if head?.next == nil { return head!.val }\n\n        var pointer1 = head\n        var pointer2 = head\n\n        // Run pointer2 with double speed to find the mid-node\n        while pointer2?.next?.next != nil {\n            pointer1 = pointer1?.next\n            pointer2 = pointer2?.next?.next\n        }\n\n        // We are now middle of LinkedList, lets reset the pointer agains\n        // but List maybe EVEN or ODD\n        // if pointer2?.next == nil { pointer2 = pointer1 } // ODD\n        if pointer2?.next?.next == nil { pointer2 = pointer1?.next } // EVEN\n\n        // Reset pointer1 with head & reverse pointer2\n        pointer1 = head\n        pointer2 = reverseList(pointer2, nil)\n\n        return pairSum(pointer1, pointer2)\n    }\n\n    private func reverseList(_ head: ListNode?, _ previous: ListNode?) -> ListNode? {\n        if head == nil { return previous }\n\n        let next = head?.next\n        head?.next = previous\n\n        return reverseList(next, head)\n    }\n\n    private func pairSum(_ head1: ListNode?, _ head2: ListNode?) -> Int {\n        var pointer1 = head1\n        var pointer2 = head2\n\n        var maxSum = Int.min\n\n        while pointer2 != nil {\n            let currentPairSum = pointer1!.val + pointer2!.val\n            maxSum = max(maxSum, currentPairSum)\n\n            pointer1 = pointer1?.next\n            pointer2 = pointer2?.next\n        }\n\n        return maxSum\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list"}