{"id":712786284,"lang":"swift","time":"1Â month","timestamp":1654174645,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/712786284/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"14.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func widthOfBinaryTree(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        var maxWidth = Int.min\n        let queue = Queue()\n        queue.enQueue(NodeInfo(root, 0))\n        \n        while queue.isEmpty == false {\n            var firstNodeInfoIndex: Int64 = 0\n            var lastNodeInfoIndex: Int64 = 0\n            let currentLevelStartingIndex = queue.front!.index\n            let currentLevelNodeCount = queue.count\n            \n            for i in 0..<currentLevelNodeCount {\n                let currentNodeInfo = queue.deQueue()!\n                let currentNodeIndex = currentNodeInfo.index - currentLevelStartingIndex\n                \n                if i == 0 { firstNodeInfoIndex = currentNodeIndex }\n                if i == currentLevelNodeCount-1 { lastNodeInfoIndex = currentNodeIndex }\n                \n                let newIndex = (currentNodeIndex*2)\n                \n                if let leftNode = currentNodeInfo.node.left {\n                    queue.enQueue(NodeInfo(leftNode, newIndex))\n                }\n                \n                if let rightNode = currentNodeInfo.node.right {\n                    queue.enQueue(NodeInfo(rightNode, newIndex+1))\n                }\n            }\n            \n            let currentLevelWidth = Int(lastNodeInfoIndex - firstNodeInfoIndex + 1)\n            maxWidth = max(maxWidth, currentLevelWidth)\n        }\n        \n        return maxWidth\n    }\n}\n\nstruct NodeInfo {\n    let node: TreeNode\n    let index: Int64\n    \n    init(_ node: TreeNode, _ index: Int64) {\n        self.node = node\n        self.index = index\n    }\n}\n\nclass Queue {\n    private var array: [NodeInfo] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    var count: Int { array.count }\n    \n    var front: NodeInfo? { array.first }\n    \n    func enQueue(_ element: NodeInfo) {\n        array.append(element)\n    }\n    \n    func deQueue() -> NodeInfo? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree"}