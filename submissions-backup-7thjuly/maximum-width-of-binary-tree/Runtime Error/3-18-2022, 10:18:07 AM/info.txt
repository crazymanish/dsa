{"id":662337753,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647595087,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/662337753/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func widthOfBinaryTree(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        var maxWidth = Int.min\n        let queue = Queue()\n        queue.enQueue(NodeInfo(root, 0))\n        \n        while queue.isEmpty == false {\n            var currentLevelNodeInfos: [NodeInfo] = []\n            \n            while queue.isEmpty == false {\n                let currentNodeInfo = queue.deQueue()!\n                currentLevelNodeInfos.append(currentNodeInfo)\n            }\n            \n            let firstNodeIndex = currentLevelNodeInfos.first!.index\n            let lastNodeIndex = currentLevelNodeInfos.last!.index\n            let currentLevelWidth = lastNodeIndex - firstNodeIndex + 1\n            maxWidth = max(maxWidth, currentLevelWidth)\n            \n            for nodeInfo in currentLevelNodeInfos {\n                if let leftNode = nodeInfo.node.left {\n                    queue.enQueue(NodeInfo(leftNode, (nodeInfo.index*2)))\n                }\n                \n                if let rightNode = nodeInfo.node.right {\n                    queue.enQueue(NodeInfo(rightNode, (nodeInfo.index*2)+1))\n                }\n            }\n        }\n        \n        \n        return maxWidth\n    }\n}\n\nprivate extension TreeNode {\n    var isLeafNode: Bool { left == nil && right == nil }\n}\n\nclass NodeInfo {\n    let node: TreeNode\n    let index: Int\n    \n    init(_ node: TreeNode, _ index: Int) {\n        self.node = node\n        self.index = index\n    }\n}\n\nclass Queue {\n    private var array: [NodeInfo] = []\n    \n    var isEmpty: Bool { array.isEmpty }\n    \n    func enQueue(_ element: NodeInfo) {\n        array.append(element)\n    }\n    \n    func deQueue() -> NodeInfo? {\n        if isEmpty { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree"}