{"id":676952368,"lang":"swift","time":"2 months, 4 weeks","timestamp":1649509622,"status_display":"Accepted","runtime":"2611 ms","url":"/submissions/detail/676952368/","is_pending":"Not Pending","title":"Minimize the Difference Between Target and Chosen Elements","memory":"16.7 MB","code":"class Solution {\n    var matrixRowsCount = 0\n    var matrixColumnsCount = 0\n    \n    func minimizeTheDifference(_ mat: [[Int]], _ target: Int) -> Int {\n        matrixRowsCount = mat.count\n        matrixColumnsCount = mat[0].count\n        var dpMemorizationCache: [[Int]] = Array(repeating: Array(repeating: -1, count: (70 * 70 + 1)), count: 70 + 1)\n\n        return minimizeTheDifference(mat, 0, 0, target, &dpMemorizationCache)\n    }\n\n    private func minimizeTheDifference(_ mat: [[Int]], _ currentRow: Int, _ currentSum: Int, _ target: Int, _ cache: inout [[Int]]) -> Int {\n        if currentRow >= matrixRowsCount { return abs(currentSum - target) }\n\n        // Check cache if we already have result or not\n        if cache[currentRow][currentSum] != -1  { return cache[currentRow][currentSum] }\n\n        var minimumDifference = Int.max\n        \n        for column in 0..<matrixColumnsCount {\n            let currentValue = mat[currentRow][column]\n            let currentDifference = minimizeTheDifference(mat, currentRow+1, currentSum+currentValue, target, &cache)\n            \n            minimumDifference = min(minimumDifference, currentDifference)\n        }\n        \n        // Save result into cache\n        cache[currentRow][currentSum] = minimumDifference\n\n        return minimumDifference\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-the-difference-between-target-and-chosen-elements"}