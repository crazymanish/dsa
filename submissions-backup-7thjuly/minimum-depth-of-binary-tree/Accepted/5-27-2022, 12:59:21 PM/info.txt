{"id":708273261,"lang":"swift","time":"1 month, 1 week","timestamp":1653649161,"status_display":"Accepted","runtime":"1242 ms","url":"/submissions/detail/708273261/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"24.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var minDepth = Int.max\n\n    func minDepth(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        findAllDepths(root, 0)\n\n        return minDepth\n    }\n\n    private func findAllDepths(_ root: TreeNode?, _ currentDepth: Int) {\n        guard let currentNode = root else { return }\n\n        let newDepth = currentDepth + 1\n\n        if currentNode.left == nil && currentNode.right == nil {\n            minDepth = min(minDepth, newDepth)\n        }\n\n        findAllDepths(currentNode.left, newDepth)\n        findAllDepths(currentNode.right, newDepth)\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}