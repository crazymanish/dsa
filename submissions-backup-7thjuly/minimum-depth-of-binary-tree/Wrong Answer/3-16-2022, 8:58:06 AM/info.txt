{"id":661054270,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647417486,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/661054270/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var minDepth = Int.max\n\n    func minDepth(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n        \n        findAllPaths(root, \"\")\n\n        return minDepth\n    }\n\n    private func findAllPaths(_ root: TreeNode?, _ currentPath: String) {\n        guard let currentNode = root else { return }\n\n        let newPath = currentPath + \"\\(currentNode.val)\"\n\n        if currentNode.left == nil && currentNode.right == nil {\n            minDepth = min(minDepth, newPath.count)\n        }\n\n        findAllPaths(currentNode.left, newPath)\n        findAllPaths(currentNode.right, newPath)\n    }\n}\n","compare_result":"1111111111111001000000010100110000100111100000000001","title_slug":"minimum-depth-of-binary-tree"}