{"id":692173635,"lang":"swift","time":"2Â months","timestamp":1651565783,"status_display":"Accepted","runtime":"416 ms","url":"/submissions/detail/692173635/","is_pending":"Not Pending","title":"Minimum Falling Path Sum II","memory":"14.5 MB","code":"class Solution {\n    func minFallingPathSum(_ grid: [[Int]]) -> Int {\n        var mutableMatrix = grid\n        let rowsCount = mutableMatrix.count\n        let columnsCount = mutableMatrix[0].count\n        \n        // Update matrix with minimum failing path\n        // Skip first row because that will always hold minimum value in matrix\n        for row in 1..<rowsCount {\n            for column in 0..<columnsCount {\n                mutableMatrix[row][column] += findMinValue(row, column)\n            }\n        }\n        \n        func findMinValue(_ row: Int, _ column: Int) -> Int {\n            var minElement = Int.max\n            \n            for (index, value) in mutableMatrix[row-1].enumerated() {\n                if index == column { continue } // skip for same column\n                minElement = min(minElement, value)\n            }\n            \n            return minElement == Int.max ? 0 : minElement\n        }\n        \n        // minimum value in last row will hold the answer\n        var minFallingPathSum = Int.max\n        for value in mutableMatrix[rowsCount-1] {\n            minFallingPathSum = min(minFallingPathSum, value)\n        }\n        \n        return minFallingPathSum\n    }\n}","compare_result":"1111111111111111","title_slug":"minimum-falling-path-sum-ii"}