{"id":687463049,"lang":"swift","time":"2 months, 1 week","timestamp":1650918904,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/687463049/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"14.9 MB","code":"class Solution {\n    func minSubArrayLen(_ target: Int, _ nums: [Int]) -> Int {\n        let numsCount = nums.count\n        let slidingWindow = SlidingWindow(nums)\n\n        var output = Int.max\n\n        while slidingWindow.endIndex < numsCount {\n            slidingWindow.value += slidingWindow.endIndexValue\n\n            while slidingWindow.value >= target {\n                output = min(output, slidingWindow.size)\n                slidingWindow.value -= slidingWindow.startIndexValue\n                slidingWindow.startIndex += 1\n            }\n\n            slidingWindow.endIndex += 1\n        }\n\n        return output == Int.max ? 0 : output\n    }\n}\n\nclass SlidingWindow {\n    var startIndex = 0\n    var endIndex = 0\n\n    var value = 0\n\n    var startIndexValue: Int { array[startIndex] }\n    var endIndexValue: Int { array[endIndex] }\n    var size: Int { endIndex-startIndex+1 }\n\n    private let array: [Int]\n\n    init(_ array: [Int]) {\n        self.array = array\n    }\n}\n","compare_result":"1111111111111111111","title_slug":"minimum-size-subarray-sum"}