{"id":670998180,"lang":"swift","time":"3 months, 1 week","timestamp":1648733267,"status_display":"Accepted","runtime":"82 ms","url":"/submissions/detail/670998180/","is_pending":"Not Pending","title":"Most Frequent Subtree Sum","memory":"15.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    var hashMap: [Int : Int] = [:]\n    \n    func findFrequentTreeSum(_ root: TreeNode?) -> [Int] {\n        if root == nil { return [] }\n        \n        findTreeSum(root)\n        \n        let highestFrequency = Array(hashMap.values).sorted().last!\n\n        var output: [Int] = []\n        for (key, value) in hashMap {\n            if value == highestFrequency { output.append(key) }\n        }\n        \n        return output\n    }\n    \n    private func findTreeSum(_ root: TreeNode?) -> Int {\n        guard let currentNode = root else { return 0 }\n        \n        let leftSum = findTreeSum(currentNode.left)\n        let rightSum = findTreeSum(currentNode.right)\n        \n        let currentNodeSum = currentNode.val + leftSum + rightSum\n        \n        let hashMapValue = hashMap[currentNodeSum] ?? 0\n        hashMap[currentNodeSum] = hashMapValue + 1\n        \n        return currentNodeSum\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"most-frequent-subtree-sum"}