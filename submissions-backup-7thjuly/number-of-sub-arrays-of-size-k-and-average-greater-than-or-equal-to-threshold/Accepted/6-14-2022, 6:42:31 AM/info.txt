{"id":721773093,"lang":"swift","time":"3 weeks, 2 days","timestamp":1655181751,"status_display":"Accepted","runtime":"2166 ms","url":"/submissions/detail/721773093/","is_pending":"Not Pending","title":"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold","memory":"18.1 MB","code":"class Solution {\n    private var slidingWindowSize: Int!\n    private var slidingWindow: SlidingWindow<[Int]>!\n    private var currentSlidingWindowSum: Double = 0\n    private var numOfSubarrays: Int = 0\n\n    func numOfSubarrays(_ arr: [Int], _ k: Int, _ threshold: Int) -> Int {\n        slidingWindow = SlidingWindow(arr)\n        slidingWindowSize = k\n        let inputNumsCount = arr.count\n\n        while slidingWindow.endIndex < inputNumsCount {\n            handleScenarioBeforeReachingTheWindowSize()\n\n            handleScenarioOnReachingTheWindowSize(threshold)\n\n            // Slide window by one from end.\n            slidingWindow.endIndex += 1\n        }\n\n        return numOfSubarrays\n    }\n\n    private func handleScenarioBeforeReachingTheWindowSize() {\n        // Just keep adding values into sum\n        if slidingWindow.value.count <= slidingWindowSize {\n            let lastValue = Array(slidingWindow.endIndexValue).first!\n\n            currentSlidingWindowSum += Double(lastValue)\n        }\n    }\n\n    private func handleScenarioOnReachingTheWindowSize(_ threshold: Int) {\n        if slidingWindow.value.count == slidingWindowSize {\n            let currentWindowAvg = currentSlidingWindowSum / Double(slidingWindowSize)\n            if currentWindowAvg >= Double(threshold) {\n                numOfSubarrays += 1 // YaY: Found valid sub-array\n            }\n\n            // Remove start window element from current-sum, before sliding next window\n            let startValue = Array(slidingWindow.startIndexValue).first!\n            currentSlidingWindowSum -= Double(startValue)\n\n            // Slide window by one from start.\n            slidingWindow.startIndex += 1\n        }\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold"}