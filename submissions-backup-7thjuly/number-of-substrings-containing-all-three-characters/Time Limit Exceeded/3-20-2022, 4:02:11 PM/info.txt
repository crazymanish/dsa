{"id":663761129,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647788531,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/663761129/","is_pending":"Not Pending","title":"Number of Substrings Containing All Three Characters","memory":"N/A","code":"class Solution {\n    func numberOfSubstrings(_ s: String) -> Int {\n        let slidingWindow = SlidingWindow(s)\n        var slidingWindowFirstValue: String { String(slidingWindow.startIndexValue) }\n        var slidingWindowLastValue: String { String(slidingWindow.endIndexValue) }\n\n        var hashMap = [\"a\" : 0, \"b\" : 0, \"c\" : 0]\n        var isFoundSubString: Bool { hashMap[\"a\"]! > 0 && hashMap[\"b\"]! > 0 && hashMap[\"c\"]! > 0 }\n\n        let inputStringCount = s.count\n        var numberOfSubstrings = 0\n\n        while slidingWindow.endIndex < inputStringCount {\n            let lastValue = slidingWindowLastValue\n            hashMap[lastValue] = hashMap[lastValue]! + 1\n\n            while isFoundSubString {\n                numberOfSubstrings += (inputStringCount - slidingWindow.endIndex)\n\n                // Update startIndex cache value in HashMap\n                let firstValue = slidingWindowFirstValue\n                hashMap[firstValue] = hashMap[firstValue]! - 1\n\n                // Move sliding window by 1\n                slidingWindow.startIndex += 1\n            }\n\n            slidingWindow.endIndex += 1\n        }\n\n        return numberOfSubstrings\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var size: Int { endIndex - startIndex + 1 }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}","compare_result":"111111111111111111111111111110000000000000000000000000","title_slug":"number-of-substrings-containing-all-three-characters"}