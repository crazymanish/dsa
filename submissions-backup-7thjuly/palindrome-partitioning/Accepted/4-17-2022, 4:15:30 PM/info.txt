{"id":682188449,"lang":"swift","time":"2 months, 3 weeks","timestamp":1650204930,"status_display":"Accepted","runtime":"789 ms","url":"/submissions/detail/682188449/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"29.8 MB","code":"class Solution {\n    func partition(_ s: String) -> [[String]] {\n        var output: [[String]] = []\n        var palindromes: [String] = []\n    \n        func backtracking(_ characters: [Character], _ start: Int) {\n            if start == characters.count {\n                output.append(palindromes)\n            } else {\n                for index in start..<characters.count {\n                    if isPalindrome(characters, start, index) {\n                        let palindromeString = String(characters[start...index])\n                        palindromes.append(palindromeString)\n                        \n                        backtracking(characters, index+1)\n                        \n                        palindromes.removeLast()\n                    }\n                }\n            }\n        }\n        \n        backtracking(Array(s), 0)\n        \n        return output\n    }\n    \n   private func isPalindrome(_ characters: [Character], _ leftIndex: Int, _ rightIndex: Int) -> Bool {\n        var leftPointerIndex = leftIndex\n        var rightPointerIndex = rightIndex\n        \n        while leftPointerIndex <= rightPointerIndex {\n            let leftChar = characters[leftPointerIndex]\n            let rightChar = characters[rightPointerIndex]\n            \n            if leftChar != rightChar { return false }\n            \n            leftPointerIndex += 1\n            rightPointerIndex -= 1\n        }\n        \n        return true\n    }\n}\n","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning"}