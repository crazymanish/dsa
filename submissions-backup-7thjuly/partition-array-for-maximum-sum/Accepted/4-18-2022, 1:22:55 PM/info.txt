{"id":682749062,"lang":"swift","time":"2 months, 2 weeks","timestamp":1650280975,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/682749062/","is_pending":"Not Pending","title":"Partition Array for Maximum Sum","memory":"13.9 MB","code":"class Solution {\n    func maxSumAfterPartitioning(_ arr: [Int], _ k: Int) -> Int {\n        var dpCache: [Int] = []\n        dpCache.append(0)\n        \n        for (index, element) in arr.enumerated() {\n            var maxElement = Int.min\n            var maxSum = Int.min\n            \n            var kIndex = 0\n            while kIndex < k && index-kIndex >= 0 {\n                maxElement = max(maxElement, arr[index-kIndex])\n                \n                let maxElementSum = maxElement*(kIndex+1)\n                let currentSum = dpCache[index-kIndex]+maxElementSum\n                maxSum = max(maxSum, currentSum)\n                \n                kIndex += 1\n            }\n            \n            dpCache.append(maxSum)\n        }\n        \n        return dpCache.last!\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"partition-array-for-maximum-sum"}