{"id":662676556,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647645029,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/662676556/","is_pending":"Not Pending","title":"Path Sum II","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var hashMap: [Int: [[Int]]] = [:]\n\n    func pathSum(_ root: TreeNode?, _ targetSum: Int) -> [[Int]] {\n        guard let root = root else { return [] }\n\n        findAllPathSum(root, targetSum, 0, [])\n\n        return hashMap[targetSum]!\n    }\n\n    private func findAllPathSum(_ root: TreeNode?, _ targetSum: Int, _ currentSum: Int, _ currentElements: [Int]) {\n        guard let currentNode = root else { return }\n\n        let newSum = currentSum + currentNode.val\n        let newElements = currentElements + [currentNode.val]\n\n        if currentNode.isLeafNode && newSum == targetSum {\n            if let cacheElements = hashMap[newSum] {\n                hashMap[newSum] = cacheElements + [newElements]\n            } else {\n                hashMap[newSum] = [newElements]\n            }\n        }\n\n        findAllPathSum(currentNode.left, targetSum, newSum, newElements)\n        findAllPathSum(currentNode.right, targetSum, newSum, newElements)\n    }\n}\n\nprivate extension TreeNode {\n    var isLeafNode: Bool { left == nil && right == nil }\n}\n","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"path-sum-ii"}