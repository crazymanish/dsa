{"id":695457372,"lang":"swift","time":"2Â months","timestamp":1652008557,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/695457372/","is_pending":"Not Pending","title":"Permutations II","memory":"14.5 MB","code":"class Solution {\n    // This is very simiar question to \n    // 46. Permutations\n    // https://leetcode.com/problems/permutations/\n    // \n    // Only difference is: Using Set for allPermutations instead of Array to keep the Unique permutations\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\n        let lastIndex = nums.count-1\n        var mutableNums = nums\n        var allPermutations: Set<[Int]> = []\n        var currentPermutation: [Int] = []\n        \n        func findPermutations(_ currentIndex: Int) {\n            if currentIndex > lastIndex {\n                allPermutations.insert(currentPermutation)\n                return\n            }\n            \n            for permutationIndex in currentIndex...lastIndex {\n                swap(currentIndex, permutationIndex)\n                \n                let currentIndexValue = mutableNums[currentIndex]\n                currentPermutation.append(currentIndexValue)\n                \n                findPermutations(currentIndex+1)\n                \n                // backtracking\n                swap(currentIndex, permutationIndex)\n                currentPermutation.removeLast()\n            }\n        }\n        \n        func swap(_ firstIndex: Int, _ secondIndex: Int) {\n            let temp = mutableNums[firstIndex]\n            mutableNums[firstIndex] = mutableNums[secondIndex]\n            mutableNums[secondIndex] = temp\n        }\n        \n        findPermutations(0)\n        return Array(allPermutations)\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii"}