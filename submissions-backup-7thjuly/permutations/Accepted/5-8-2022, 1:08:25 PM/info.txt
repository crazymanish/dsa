{"id":695454263,"lang":"swift","time":"2Â months","timestamp":1652008105,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/695454263/","is_pending":"Not Pending","title":"Permutations","memory":"14.7 MB","code":"class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n        let lastIndex = nums.count-1\n        var mutableNums = nums\n        var allPermutations: [[Int]] = []\n        var currentPermutation: [Int] = []\n        \n        func findPermutations(_ currentIndex: Int) {\n            if currentIndex > lastIndex {\n                allPermutations.append(currentPermutation)\n                return\n            }\n            \n            for permutationIndex in currentIndex...lastIndex {\n                swap(currentIndex, permutationIndex)\n                \n                let currentIndexValue = mutableNums[currentIndex]\n                currentPermutation.append(currentIndexValue)\n                \n                findPermutations(currentIndex+1)\n                \n                // backtracking\n                swap(currentIndex, permutationIndex)\n                currentPermutation.removeLast()\n            }\n        }\n        \n        func swap(_ firstIndex: Int, _ secondIndex: Int) {\n            let temp = mutableNums[firstIndex]\n            mutableNums[firstIndex] = mutableNums[secondIndex]\n            mutableNums[secondIndex] = temp\n        }\n        \n        findPermutations(0)\n        return allPermutations\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations"}