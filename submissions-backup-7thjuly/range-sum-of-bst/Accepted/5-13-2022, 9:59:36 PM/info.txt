{"id":698891759,"lang":"swift","time":"1 month, 3 weeks","timestamp":1652471976,"status_display":"Accepted","runtime":"634 ms","url":"/submissions/detail/698891759/","is_pending":"Not Pending","title":"Range Sum of BST","memory":"16.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\n\nclass Queue {\n    private var array: [TreeNode] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ treeNode: TreeNode) {\n        array.append(treeNode)\n    }\n\n    func deQueue() -> TreeNode? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n\nclass Solution {\n    func rangeSumBST(_ root: TreeNode?, _ low: Int, _ high: Int) -> Int {\n        guard let rootNode = root else { return 0 }\n\n        var outputSum = 0\n\n        let queue = Queue()\n        queue.enQueue(rootNode)\n\n        while queue.isEmpty == false {\n            let currentNode = queue.deQueue()!\n\n            if currentNode.val >= low && currentNode.val <= high {\n                outputSum += currentNode.val\n            }\n\n            if currentNode.left != nil { queue.enQueue(currentNode.left!) }\n            if currentNode.right != nil { queue.enQueue(currentNode.right!) }\n        }\n\n        return outputSum\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"range-sum-of-bst"}