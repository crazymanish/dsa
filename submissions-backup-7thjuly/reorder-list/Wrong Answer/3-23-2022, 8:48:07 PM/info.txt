{"id":665935031,"lang":"swift","time":"3 months, 2 weeks","timestamp":1648064887,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/665935031/","is_pending":"Not Pending","title":"Reorder List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reorderList(_ head: ListNode?) {\n        if head == nil { return }\n\n        var pointer1 = head\n        var pointer2 = head\n\n        // Run pointer2 with double speed to find the mid-node\n        while pointer2?.next?.next != nil {\n            pointer1 = pointer1?.next\n            pointer2 = pointer2?.next?.next\n        }\n\n        // We are now middle of LinkedList, lets reset the pointer agains\n        // but List maybe EVEN or ODD\n        if pointer2?.next == nil { pointer2 = pointer1 } // ODD\n        if pointer2?.next?.next == nil { pointer2 = pointer1?.next } // EVEN\n\n        // reset pointer1 & reverse pointer2\n        pointer1 = head\n        pointer2 = reverseList(pointer2, nil)\n\n        // Reorder nodes\n        while pointer1?.next != nil && pointer2?.next != nil {\n            let pointer1Next = pointer1!.next\n            let pointer2Next = pointer2!.next\n\n            pointer1!.next = pointer2\n            pointer2!.next = pointer1Next\n\n            pointer1 = pointer1Next\n            pointer2 = pointer2Next\n        }\n    }\n\n    private func reverseList(_ current: ListNode?, _ previous: ListNode?) -> ListNode? {\n        if current == nil { return previous }\n\n        let next = current?.next\n        current?.next = previous\n\n        return reverseList(next, current)\n    }\n}\n","compare_result":"111101111111","title_slug":"reorder-list"}