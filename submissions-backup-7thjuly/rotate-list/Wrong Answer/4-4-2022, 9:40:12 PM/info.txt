{"id":673867122,"lang":"swift","time":"3Â months","timestamp":1649101212,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/673867122/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {\n        if head == nil { return nil }\n\n        var pointer1 = head\n        var pointer2 = head\n\n        // Run pointer2 after pointer1 is already k times ahead\n        var nodeCounter = 0\n        while pointer1?.next != nil {\n            pointer1 = pointer1?.next\n            \n            if nodeCounter >= k {\n                pointer2 = pointer2?.next   \n            }\n            \n            nodeCounter += 1\n        }\n        \n        // List does not contain k element?\n        if pointer2?.next == nil { return nil }\n        \n        // Let's finish rotation, at this moment\n        // Pointer1 ==> Node(5)\n        // Pointer2 ==> Node(3)\n\n        // Pointer3 ==> will become Node(4)\n        let pointer3 = pointer2?.next \n\n        // Let's make Node(3) --> next NIL\n        pointer2?.next = nil\n        \n        // Let's join head as Node(5) ---> next  \n        pointer1?.next = head\n        \n        // return Node(4)\n        return pointer3\n    }\n}","compare_result":"101100001011101100100111000010010100011010010001111100110111101110110110010001010010001101111010010101101101011100001010011100101001111111011011111111011110001110110111011111101110000111001101011111111011100111111111111101111111111","title_slug":"rotate-list"}