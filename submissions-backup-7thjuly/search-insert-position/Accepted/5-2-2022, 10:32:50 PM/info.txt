{"id":691838746,"lang":"swift","time":"2Â months","timestamp":1651523570,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/691838746/","is_pending":"Not Pending","title":"Search Insert Position","memory":"14.1 MB","code":"class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        let lastIndex = nums.count-1\n        \n        func findInsertIndexUsingRecursiveBinarySearch(_ startIndex: Int, _ endIndex: Int) -> Int {\n            if startIndex > endIndex { return -1 } // Not-found exit base-case\n            \n            let midIndex = startIndex + (endIndex-startIndex) / 2\n            let midIndexValue = nums[midIndex]\n            \n            // Found answer that is equal to target\n            if midIndexValue == target { return midIndex }\n            \n            // Find left,right value of midIndex\n            let leftValue = midIndex-1 >= 0 ? nums[midIndex-1] : Int.min\n            let rightValue = midIndex+1 <= lastIndex ? nums[midIndex+1] : Int.max\n            \n            // check left-right answer\n            if midIndexValue > target && leftValue < target { return midIndex }\n            if midIndexValue < target && rightValue > target { return midIndex+1 }\n            \n            if midIndexValue > target {\n                return findInsertIndexUsingRecursiveBinarySearch(startIndex, midIndex-1) // Keep finding left side\n            } else {\n                return findInsertIndexUsingRecursiveBinarySearch(midIndex+1, endIndex) // Keep finding right side\n            }\n        }\n        \n        return findInsertIndexUsingRecursiveBinarySearch(0, lastIndex)\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position"}