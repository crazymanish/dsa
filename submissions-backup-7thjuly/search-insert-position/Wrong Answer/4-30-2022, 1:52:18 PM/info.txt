{"id":690184205,"lang":"swift","time":"2 months, 1 week","timestamp":1651319538,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/690184205/","is_pending":"Not Pending","title":"Search Insert Position","memory":"N/A","code":"class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        func findInsertIndexUsingRecursiveBinarySearch(_ startIndex: Int, _ endIndex: Int) -> Int {\n            if startIndex > endIndex { return 0 } // Not-found exit base-case\n            \n            let midIndex = startIndex + (endIndex-startIndex) / 2\n            let midIndexValue = nums[midIndex]\n            \n            // Found answer that is equal to target\n            if midIndexValue == target { return midIndex }\n            \n            // Found answer, when startIndex & endIndex pointing same element\n            if midIndex == startIndex && midIndex == endIndex {\n                if midIndexValue > target { return midIndex }\n                if midIndexValue < target { return midIndex+1 }\n            }\n            \n            if midIndexValue > target {\n                return findInsertIndexUsingRecursiveBinarySearch(startIndex, midIndex-1) // Keep finding left side\n            } else {\n                return findInsertIndexUsingRecursiveBinarySearch(midIndex+1, endIndex) // Keep finding right side\n            }\n        }\n        \n        return findInsertIndexUsingRecursiveBinarySearch(0, nums.count-1)\n    }\n}","compare_result":"1111111111111111111111111111011101111111111111111111111111110111","title_slug":"search-insert-position"}