{"id":681554046,"lang":"swift","time":"2 months, 3 weeks","timestamp":1650123750,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/681554046/","is_pending":"Not Pending","title":"Shortest Common Supersequence ","memory":"22.1 MB","code":"class Solution {\n    func shortestCommonSupersequence(_ str1: String, _ str2: String) -> String {\n        // Step1: Calculate the LCS...\n        let dpMatrix = longestCommonSubsequence(str1, str2)\n\n        // Step2: Perform \"(str1 + str2 - lcs) operation\" & tricky part is we need to maintain order\n        let output = combine(Array(str1), Array(str2), dpMatrix)\n\n        return String(output.reversed())\n    }\n\n    // Reusing code: 1143. Longest Common Subsequence\n    // https://leetcode.com/problems/longest-common-subsequence/\n    private func longestCommonSubsequence(_ text1: String, _ text2: String) -> [[Int]] {\n        let rows = Array(text1)\n        let columns = Array(text2)\n\n        let rowsCount = rows.count\n        let columnsCount = columns.count\n\n        var dpMatrix = Array(repeating: Array(repeating: 0, count: columnsCount+1), count: rowsCount+1)\n\n        for rowIndex in 1...rowsCount {\n            let currentRowChar = rows[rowIndex-1]\n            for columnIndex in 1...columnsCount {\n                let currentColumnChar = columns[columnIndex-1]\n\n                if currentRowChar == currentColumnChar {\n                    let previousLCS = dpMatrix[rowIndex-1][columnIndex-1]\n                    dpMatrix[rowIndex][columnIndex] = 1 + previousLCS\n                } else {\n                    let previousRowLCS = dpMatrix[rowIndex-1][columnIndex]\n                    let previousColumnLCS = dpMatrix[rowIndex][columnIndex-1]\n                    let previousLCS = max(previousRowLCS, previousColumnLCS)\n\n                    dpMatrix[rowIndex][columnIndex] = previousLCS\n                }\n            }\n        }\n\n        return dpMatrix\n    }\n\n    private func combine(_ str1: [Character], _ str2: [Character], _ dp: [[Int]]) -> String {\n        var i = str1.count\n        var j = str2.count\n        var result = \"\"\n\n        while i > 0 && j > 0 {\n            if str1[i-1] == str2[j-1] {\n                result += \"\\(str1[i-1])\"\n                i -= 1\n                j -= 1\n            } else {\n                if dp[i-1][j] > dp[i][j-1] {\n                    result += \"\\(str1[i-1])\"\n                    i -= 1\n                } else {\n                    result += \"\\(str2[j-1])\"\n                    j -= 1\n                }\n            }\n        }\n\n        while i>0 {\n            result += \"\\(str1[i-1])\"\n            i -= 1\n        }\n\n        while j>0 {\n            result += \"\\(str2[j-1])\"\n            j -= 1\n        }\n\n        return result\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"shortest-common-supersequence"}