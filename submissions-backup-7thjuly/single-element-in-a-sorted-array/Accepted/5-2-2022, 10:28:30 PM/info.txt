{"id":691836657,"lang":"swift","time":"2Â months","timestamp":1651523310,"status_display":"Accepted","runtime":"215 ms","url":"/submissions/detail/691836657/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"17.6 MB","code":"class Solution {\n    func singleNonDuplicate(_ nums: [Int]) -> Int {\n        let lastIndex = nums.count-1\n        \n        func findSingleNumberUsingRecursiveBinarySearch(_ startIndex: Int, _ endIndex: Int) -> Int {\n            if startIndex > endIndex { return -1 } // Not found, base-case\n            \n            let midIndex = startIndex + (endIndex-startIndex) / 2\n            let midIndexValue = nums[midIndex]\n            \n            let leftValue = midIndex-1 >= 0 ? nums[midIndex-1] : -1\n            let rightValue = midIndex+1 <= lastIndex ? nums[midIndex+1] : -1\n            \n            if midIndexValue != leftValue && midIndexValue != rightValue { return midIndexValue } // Found answer\n            \n            let leftSideDuplicateValue = findSingleNumberUsingRecursiveBinarySearch(startIndex, midIndex-1) // Find left side\n            if leftSideDuplicateValue != -1 {\n                return leftSideDuplicateValue\n            } else {\n                return findSingleNumberUsingRecursiveBinarySearch(midIndex+1, endIndex) // Find right side\n            }\n        }\n        \n        return findSingleNumberUsingRecursiveBinarySearch(0, lastIndex)\n    }\n}","compare_result":"111111111111111","title_slug":"single-element-in-a-sorted-array"}