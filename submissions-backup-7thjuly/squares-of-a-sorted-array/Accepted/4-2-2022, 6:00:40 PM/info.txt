{"id":672333313,"lang":"swift","time":"3Â months","timestamp":1648915240,"status_display":"Accepted","runtime":"344 ms","url":"/submissions/detail/672333313/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"15.8 MB","code":"class Solution {\n    // Follow up: Squaring each element and sorting the new array is very trivial, \n    // could you find an O(n) solution using a different approach?\n    //\n    // Yes, using two pointers.\n    func sortedSquares(_ nums: [Int]) -> [Int] {\n        var output: [Int] = []\n        var leftPointer = 0\n        var rightPointer = nums.count-1\n        \n        while leftPointer <= rightPointer {\n            let leftSquareRoot = nums[leftPointer] * nums[leftPointer]\n            let rightSquareRoot = nums[rightPointer] * nums[rightPointer]\n            \n            if leftSquareRoot > rightSquareRoot {\n                output.insert(leftSquareRoot, at: 0)\n                \n                leftPointer += 1\n            } else {\n                output.insert(rightSquareRoot, at: 0)\n                \n                rightPointer -= 1\n            }\n        }\n        \n        return output\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"squares-of-a-sorted-array"}