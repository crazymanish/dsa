{"id":686578175,"lang":"swift","time":"2 months, 2 weeks","timestamp":1650800637,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/686578175/","is_pending":"Not Pending","title":"Stone Game II","memory":"14.4 MB","code":"class Solution {\n    func stoneGameII(_ piles: [Int]) -> Int {\n        func playStoneGame(startIndex: Int, M: Int) -> Int {\n            if startIndex > pilesCount { return 0 }\n            \n            let cacheValue = dpCache[startIndex][M]\n            if cacheValue != -1 { return cacheValue }\n            \n            var sum = 0\n            var answer = Int.min\n            for X in 1...2*M {\n                let currentIndex = startIndex+X-1\n                if currentIndex < pilesCount { sum += piles[currentIndex] }\n                \n                let possibleAnswer = sum - playStoneGame(startIndex: currentIndex+1, M: max(M, X))\n                answer = max(answer, possibleAnswer)\n            }\n            \n            dpCache[startIndex][M] = answer\n            return answer\n        }\n        \n        let pilesCount = piles.count\n        var dpCache = Array(repeating: Array(repeating: -1, count: 2*pilesCount+1), count: pilesCount+1)\n        \n        var totalStones = 0 // A+B\n        for stone in piles { totalStones += stone }\n        \n        let diffOfAliceAndBobStones = playStoneGame(startIndex: 0, M: 1) // A-B\n        \n        // Logic is: (A+B)+(A-B) => 2A/2 ==> A (Alice) \n        return (totalStones+diffOfAliceAndBobStones) / 2 \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-ii"}