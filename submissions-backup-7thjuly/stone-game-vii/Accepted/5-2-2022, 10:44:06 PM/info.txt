{"id":691843902,"lang":"swift","time":"2Â months","timestamp":1651524246,"status_display":"Accepted","runtime":"2838 ms","url":"/submissions/detail/691843902/","is_pending":"Not Pending","title":"Stone Game VII","memory":"22.2 MB","code":"class Solution {\n    func stoneGameVII(_ stones: [Int]) -> Int {\n        func playStoneGame(_ startIndex: Int, _ endIndex: Int) -> Int {\n            if startIndex >= endIndex { return 0 }\n            \n            var totalValue = 0\n            for index in startIndex...endIndex { totalValue += stones[index] }\n            \n            let cacheValue = dpCache[startIndex][endIndex]\n            if cacheValue != -1 { return cacheValue }\n            \n            // Let's assume that Alice will pick startIndex\n            let possibleAnswer1 = (totalValue - stones[startIndex]) - playStoneGame(startIndex+1, endIndex)\n            \n            // Let's assume that Alice will pick endIndex\n            let possibleAnswer2 = (totalValue - stones[endIndex]) - playStoneGame(startIndex, endIndex-1)\n            \n            let answer = max(possibleAnswer1, possibleAnswer2)\n            \n            dpCache[startIndex][endIndex] = answer\n            return answer\n        }\n        \n        let stonesCount = stones.count\n        var dpCache = Array(repeating: Array(repeating: -1, count: stonesCount+1), count: stonesCount+1)\n        \n        return playStoneGame(0, (stonesCount-1))\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-vii"}