{"id":695595743,"lang":"swift","time":"2Â months","timestamp":1652028905,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/695595743/","is_pending":"Not Pending","title":"Subsets II","memory":"14.4 MB","code":"class Solution {\n    // This is extension of:\n    // 78. Subsets: https://leetcode.com/problems/subsets/\n    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {\n        let lastIndex = nums.count-1\n        let sortedNums = nums.sorted()\n        \n        // Using Set instead of array to avoid duplicate insert\n        var allSubsets: Set<[Int]> = []\n        var currentSubset: [Int] = []\n        \n        func findAllSubsets(_ currentIndex: Int) {\n            if currentIndex > lastIndex {\n                allSubsets.insert(currentSubset)\n                return\n            }\n            \n            let currentIndexValue = sortedNums[currentIndex]\n            // We always have two choices:\n            // Choice1: don't aad this value into currentSubset\n            // Choice2: add this value intocurrentSubset\n            \n            // Choice1: don't aad this value into currentSubset\n            findAllSubsets(currentIndex+1)\n            \n            // Choice2:add this value into currentSubset\n            currentSubset += [currentIndexValue]\n            findAllSubsets(currentIndex+1)\n            currentSubset.removeLast() // backtracking\n        }\n        \n        findAllSubsets(0)\n        return Array(allSubsets)\n    }\n}","compare_result":"11111111111111111111","title_slug":"subsets-ii"}