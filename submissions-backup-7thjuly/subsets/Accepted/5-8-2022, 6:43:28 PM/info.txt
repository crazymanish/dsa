{"id":695590095,"lang":"swift","time":"2Â months","timestamp":1652028208,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/695590095/","is_pending":"Not Pending","title":"Subsets","memory":"14.2 MB","code":"class Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n        let lastIndex = nums.count-1\n        var allSubsets: [[Int]] = []\n        var currentSubset: [Int] = []\n        \n        func findAllSubSets(_ currentIndex: Int) {\n            if currentIndex > lastIndex { \n                allSubsets.append(currentSubset)\n                return \n            }\n            \n            let currentIndexValue = nums[currentIndex]\n            // We always have two choices:\n            // Choice1: don't aad this value into currentSubset\n            // Choice2: add this value intocurrentSubset\n            \n            // Choice1: don't aad this value into currentSubset\n            findAllSubSets(currentIndex+1)\n            \n            // Choice2:add this value into currentSubset\n            currentSubset += [currentIndexValue]\n            findAllSubSets(currentIndex+1)\n            currentSubset.removeLast() // backtracking\n        }\n        \n        findAllSubSets(0)\n        return allSubsets\n    }\n}\n\n/*\nclass Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n        let lastIndex = nums.count-1\n        var allSubsets: [[Int]] = [[]]\n        \n        func findAllSubSets(_ currentIndex: Int) {\n            if currentIndex > lastIndex { return }\n            \n            let currentIndexValue = nums[currentIndex]\n            \n            for index in 0..<allSubsets.count {\n                let subset = allSubsets[index]\n                let newSubset = subset + [currentIndexValue]\n                allSubsets.append(newSubset)\n            }\n            \n            findAllSubSets(currentIndex+1)\n        }\n        \n        findAllSubSets(0)\n        return allSubsets\n    }\n}\n*/","compare_result":"1111111111","title_slug":"subsets"}