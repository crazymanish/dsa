{"id":663357901,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647738002,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/663357901/","is_pending":"Not Pending","title":"Substrings of Size Three with Distinct Characters","memory":"14.3 MB","code":"class Solution {\n    private var hashMap: [String : Int] = [:]\n    private var hashMapCounter = 0\n\n    func countGoodSubstrings(_ s: String) -> Int {\n        let slidingWindow = SlidingWindow(s)\n        let windowSize = 3\n        var goodStringsCount = 0\n\n        while slidingWindow.endIndex < s.count {\n            // Do cache endIndex value in HashMap\n            let endValue = String(slidingWindow.endIndexValue)\n            addIntoHashMap(endValue)\n\n            let currentWindowValue = slidingWindow.value\n\n            if currentWindowValue.count == windowSize {\n                // Found the Good string!\n                if hashMapCounter == windowSize { goodStringsCount += 1 }\n\n                // Update startIndex cache value in HashMap\n                let startValue = String(slidingWindow.startIndexValue)\n                removeFromHashMap(startValue)\n\n                // Move sliding window by 1\n                slidingWindow.startIndex += 1\n            }\n\n            slidingWindow.endIndex += 1\n        }\n\n        return goodStringsCount\n    }\n\n    private func addIntoHashMap(_ value: String) {\n        if let cacheValue = hashMap[value] {\n            hashMap[value] = cacheValue + 1\n        } else {\n            hashMap[value] = 1\n            hashMapCounter += 1\n        }\n    }\n\n    private func removeFromHashMap(_ value: String) {\n        if let cacheValue = hashMap[value] {\n            hashMap[value] = cacheValue - 1\n            if hashMap[value]! == 0 {\n                hashMap.removeValue(forKey: value)\n                hashMapCounter -= 1\n            }\n        }\n    }\n}\n\nclass SlidingWindow<T: Collection> {\n    let collection: T\n\n    var startIndex: Int\n    var endIndex: Int\n\n    var value: T.SubSequence { value(at: startIndex, endIndex: endIndex) }\n    var startIndexValue: T.SubSequence { value(at: startIndex) }\n    var endIndexValue: T.SubSequence { value(at: endIndex) }\n\n    init(_ collection: T, _ startIndex: Int = 0, _ endIndex: Int = 0) {\n        self.collection = collection\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    }\n\n    private func value(at index: Int) -> T.SubSequence { value(at: index, endIndex: index) }\n\n    private func value(at startIndex: Int, endIndex: Int) -> T.SubSequence {\n        let start = collection.index(collection.startIndex, offsetBy: startIndex)\n        let end = collection.index(collection.startIndex, offsetBy: endIndex)\n\n        return collection[start...end]\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substrings-of-size-three-with-distinct-characters"}