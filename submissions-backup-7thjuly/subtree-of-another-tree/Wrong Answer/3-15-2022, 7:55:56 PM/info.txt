{"id":660684000,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647370556,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/660684000/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSubtree(_ root: TreeNode?, _ subRoot: TreeNode?) -> Bool {\n        guard let subRoot = subRoot else { return false }\n\n        let firstTreeRoot = findSubRootNode(root, subRootValue: subRoot.val)\n\n        return isEqualTree(firstTreeRoot, subRoot)\n    }\n\n    private func findSubRootNode(_ root: TreeNode?, subRootValue: Int) -> TreeNode? {\n        guard let root = root else { return nil }\n\n        let queue = Queue<TreeNode>()\n        queue.enQueue(root)\n\n        var currentNode: TreeNode? = nil\n\n        while queue.isEmpty == false {\n            currentNode = queue.deQueue()!\n\n            if currentNode!.val == subRootValue { break }\n\n            if let leftNode = currentNode?.left { queue.enQueue(leftNode) }\n            if let rightNode = currentNode?.right { queue.enQueue(rightNode) }\n        }\n\n        return currentNode\n    }\n\n    private func isEqualTree(_ root1: TreeNode?, _ root2: TreeNode?) -> Bool {\n        if root1 == nil, root2 == nil { return true }\n\n        guard let root1 = root1, let root2 = root2 else { return false }\n\n        let isleftEqualTree = isEqualTree(root1.left, root2.left)\n        let isRightEqualTree = isEqualTree(root1.right, root2.right)\n\n        return root1.val == root2.val && isleftEqualTree && isRightEqualTree\n    }\n}\n\nclass Queue<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: T) {\n        array.append(value)\n    }\n\n    func deQueue() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n","compare_result":"11111001111001111111111111111111100010000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree"}