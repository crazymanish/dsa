{"id":659988085,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647282019,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/659988085/","is_pending":"Not Pending","title":"Sum of Left Leaves","memory":"14.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func sumOfLeftLeaves(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n\n        var outputSum = 0\n        let queue = Queue()\n        queue.enQueue(root)\n        \n        while queue.isEmpty == false {\n            let currentNode = queue.deQueue()!\n            \n            if let leftNode = currentNode.left {\n                queue.enQueue(leftNode)\n                \n                if leftNode.left == nil, leftNode.right == nil {\n                    outputSum += leftNode.val\n                }\n            }\n            \n            if let rightNode = currentNode.right {\n                queue.enQueue(rightNode)\n            }\n        }\n        \n        return outputSum\n    }\n}\n\nclass Queue {\n    private var array: [TreeNode] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ element: TreeNode) {\n        array.append(element)\n    }\n    \n    func deQueue() -> TreeNode? {\n        guard isEmpty == false else { return nil }\n        \n        return array.removeFirst()\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-left-leaves"}