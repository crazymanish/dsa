{"id":701717130,"lang":"swift","time":"1 month, 2 weeks","timestamp":1652828185,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/701717130/","is_pending":"Not Pending","title":"Sum of Root To Leaf Binary Numbers","memory":"14.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\n\nclass Queue<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: T) {\n        array.append(value)\n    }\n\n    func deQueue() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n\nclass Solution {\n        func sumRootToLeaf(_ root: TreeNode?) -> Int {\n        if root == nil { return 0 }\n\n        var output = 0\n\n        let queue = Queue<String>()\n        findAllPaths(root, queue: queue, currentPath: \"\")\n\n        while queue.isEmpty == false {\n            if let currentSum = Int(queue.deQueue()!, radix: 2) {\n                output += currentSum\n            }\n        }\n\n        return output\n    }\n\n    func findAllPaths(_ root: TreeNode?, queue: Queue<String>, currentPath: String) {\n        if root == nil { return }\n\n        let newPath = currentPath + String(root!.val)\n\n        if root?.left == nil && root?.right == nil {\n            queue.enQueue(newPath)\n        } else {\n            findAllPaths(root?.left, queue: queue, currentPath: newPath)\n            findAllPaths(root?.right, queue: queue, currentPath: newPath)\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-root-to-leaf-binary-numbers"}