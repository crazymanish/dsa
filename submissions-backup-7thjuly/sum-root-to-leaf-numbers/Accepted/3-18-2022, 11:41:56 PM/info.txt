{"id":662667539,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647643316,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/662667539/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"14.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func sumNumbers(_ root: TreeNode?) -> Int {\n        guard let root = root else { return 0 }\n\n        let pathNumbers = findAllPathNumbers(root, \"\")\n\n        var outputSum = 0\n        for pathNumber in pathNumbers { outputSum += pathNumber }\n        return outputSum\n    }\n\n    private func findAllPathNumbers(_ root: TreeNode?, _ currentPath: String) -> [Int] {\n        guard let currentNode = root else { return [] }\n\n        let newPath = currentPath + \"\\(currentNode.val)\"\n\n        if currentNode.isLeafNode { return [Int(newPath)!] }\n\n        let leftPathNumbers = findAllPathNumbers(currentNode.left, newPath)\n        let rightPathNumbers = findAllPathNumbers(currentNode.right, newPath)\n\n        return leftPathNumbers + rightPathNumbers\n    }\n}\n\nprivate extension TreeNode {\n    var isLeafNode: Bool { left == nil && right == nil }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-root-to-leaf-numbers"}