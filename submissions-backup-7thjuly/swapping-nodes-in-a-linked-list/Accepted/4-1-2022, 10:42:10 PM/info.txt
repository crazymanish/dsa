{"id":671832313,"lang":"swift","time":"3Â months","timestamp":1648845730,"status_display":"Accepted","runtime":"2284 ms","url":"/submissions/detail/671832313/","is_pending":"Not Pending","title":"Swapping Nodes in a Linked List","memory":"37.5 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func swapNodes(_ head: ListNode?, _ k: Int) -> ListNode? {\n        if head == nil { return nil }\n        \n        var nodeValues: [Int] = []\n        var currentNode = head\n        while currentNode != nil {\n            nodeValues.append(currentNode!.val)\n            currentNode = currentNode?.next\n        }\n        \n        // Swapping time\n        let nodeCount = nodeValues.count \n        let temp = nodeValues[k-1]\n        nodeValues[k-1] = nodeValues[nodeCount-k]\n        nodeValues[nodeCount-k] = temp\n        \n        // re-create List\n        return createList(nodeValues, nodeCount, 0)\n    }\n    \n    private func createList(_ array: [Int], _ count: Int, _ index: Int) -> ListNode? {\n        guard index < count else { return nil }\n        \n        let currentIndexValue = array[index]\n        let nextNode = createList(array, count, index+1)\n        \n        return ListNode(currentIndexValue, nextNode)\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"swapping-nodes-in-a-linked-list"}