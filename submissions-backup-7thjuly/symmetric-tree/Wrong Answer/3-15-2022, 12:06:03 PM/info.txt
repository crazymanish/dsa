{"id":660448847,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647342363,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/660448847/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSymmetric(_ root: TreeNode?) -> Bool {\n        guard let currentNode = root else { return false }\n\n        let leftFirstTraversal = leftFirstTraversal(currentNode.left)\n        let rightFirstTraversal = rightFirstTraversal(currentNode.right)\n\n        return leftFirstTraversal == rightFirstTraversal\n    }\n\n    private func leftFirstTraversal(_ root: TreeNode?) -> String {\n        guard let currentNode = root else { return \"\" }\n\n        let left = leftFirstTraversal(currentNode.left)\n        let right = leftFirstTraversal(currentNode.right)\n\n        return \"\\(currentNode.val)\" + left + right\n    }\n\n    private func rightFirstTraversal(_ root: TreeNode?) -> String {\n        guard let currentNode = root else { return \"\" }\n\n        let left = rightFirstTraversal(currentNode.left)\n        let right = rightFirstTraversal(currentNode.right)\n\n        return \"\\(currentNode.val)\" + right + left\n    }\n}","compare_result":"10011111111011111111111101011111110111011110111111100101011111001100111011001110010100011011010110011111111111101111011111000111111010110100101111110101111111001110111111110001111000110111101111111","title_slug":"symmetric-tree"}