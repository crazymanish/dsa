{"id":678519832,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649706517,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/678519832/","is_pending":"Not Pending","title":"Target Sum","memory":"N/A","code":"class Solution {\n    // Knapsack problem variation - Dynamic Programming\n    func findTargetSumWays(_ nums: [Int], _ target: Int) -> Int {\n        var totalSum = 0\n        for num in nums { totalSum += num }\n\n        // Let's assume total sum was = 5 and target = 3 then we need to find all subsets which equal to 5+3/2 => 4\n        // S1+S2 = 5\n        // S1-S2 = 3\n        // Add both ==> 2S1 = 5+3 :: S1 => 5+3/2\n        let knapsackWeight = (totalSum+target)/2\n\n        let numsCount = nums.count\n        var dpMatrix: [[Int]] = Array(repeating: Array(repeating: 0, count: (knapsackWeight + 1)), count: numsCount + 1)\n\n        // Set Default value\n        for index in 0...nums.count { dpMatrix[index][0] = 1 }\n        for index in 1...knapsackWeight { dpMatrix[0][index] = 0 }\n\n        for i in 1...numsCount {\n            for j in 0...knapsackWeight {\n                let currentNumber = nums[i-1]\n\n                if currentNumber <= j {\n                    dpMatrix[i][j] = dpMatrix[i-1][j-currentNumber] + dpMatrix[i-1][j]\n                } else {\n                    dpMatrix[i][j] = dpMatrix[i-1][j]\n                }\n            }\n        }\n\n        return dpMatrix[numsCount][knapsackWeight]\n    }\n}","compare_result":"1101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"target-sum"}