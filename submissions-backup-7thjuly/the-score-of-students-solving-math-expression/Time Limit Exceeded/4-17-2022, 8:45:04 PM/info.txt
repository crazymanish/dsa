{"id":682321683,"lang":"swift","time":"2 months, 3 weeks","timestamp":1650221104,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/682321683/","is_pending":"Not Pending","title":"The Score of Students Solving Math Expression","memory":"N/A","code":"class Solution {\n    func scoreOfStudents(_ s: String, _ answers: [Int]) -> Int {\n        var dpCacheHashMap: [String : [Int]] = [:]\n        let allCorrectAnswers = diffWaysToCompute(s, &dpCacheHashMap)\n\n        var correctAnswerHashMap: [Int : Int] = [:]\n        for answer in allCorrectAnswers { correctAnswerHashMap[answer] = 2 } // 2 score for all correct answers\n\n        let correctAnswer = computeExpression(s)\n        correctAnswerHashMap[correctAnswer] = 5 // 5 score for correct answer\n\n        var scoreOfStudents = 0\n        for answer in answers {\n            if let score = correctAnswerHashMap[answer] { scoreOfStudents += score }\n        }\n\n        return scoreOfStudents\n    }\n\n    // Same code as 241. Different Ways to Add Parentheses\n    // https://leetcode.com/problems/different-ways-to-add-parentheses/\n    private func diffWaysToCompute(_ input: String, _ cache: inout [String : [Int]]) -> [Int] {\n        var output: [Int] = []\n\n        for (index, char) in input.enumerated() {\n            if char == \"+\" || char == \"-\" || char == \"*\" {\n                let leftEndIndex = input.index(input.startIndex, offsetBy: index)\n                let rightStartIndex = input.index(input.startIndex, offsetBy: index+1)\n                let leftString = String(input.prefix(upTo: leftEndIndex))\n                let rightString = String(input.suffix(from: rightStartIndex))\n\n                let leftResults = cache[leftString] ?? diffWaysToCompute(leftString, &cache)\n                let rightResults = cache[rightString] ?? diffWaysToCompute(rightString, &cache)\n\n                for leftResult in leftResults {\n                    for rightResult in rightResults {\n                        if char == \"+\" { output.append(leftResult + rightResult) }\n                        if char == \"-\" { output.append(leftResult - rightResult) }\n                        if char == \"*\" { output.append(leftResult * rightResult) }\n                    }\n                }\n            }\n        }\n\n        if output.count == 0 { output.append(Int(input)!) }\n\n        cache[input] = output // Update cache\n\n        return output\n    }\n\n    private func computeExpression(_ input: String) -> Int {\n        // Function to find precedence of operators.\n        func precedence(_ op: Character) -> Int {\n            if(op == \"+\" || op == \"-\") { return 1 }\n            if(op == \"*\" || op == \"/\") { return 2 }\n\n            return 0\n        }\n\n        // Function to perform arithmetic operations.\n        func applyOp(_ a: Int, _ b: Int, _ op: Character) -> Int {\n            switch(op) {\n                case \"+\": return a + b\n                case \"-\": return a - b\n                case \"*\": return a * b\n                case \"/\": return a / b\n                default: return 0\n            }\n        }\n\n        let values = Stack<Int>()\n        let ops = Stack<Character>()\n        let tokens = Array(input)\n\n        var i = 0\n        while i < tokens.count {\n            // Current token is a whitespace, skip it.\n            if tokens[i] == \" \" { continue }\n\n            // Current token is a number, push it to stack for numbers\n            if (tokens[i] >= \"0\" && tokens[i] <= \"9\") {\n                var numberString = \"\"\n\n                // There may be more than one digits in number\n                while (i < tokens.count && tokens[i] >= \"0\" && tokens[i] <= \"9\") {\n                    numberString += String(tokens[i])\n                    i += 1\n                }\n\n                values.push(Int(numberString)!)\n\n               // right now the i points to the character next to the digit,\n               // since the for loop also increases the i, we would skip one\n               //  token position; we need to decrease the value of i by 1 to correct the offset.\n               i -= 1\n            }\n            // Current token is an operator.\n            else if (tokens[i] == \"+\" || tokens[i] == \"-\" || tokens[i] == \"*\" || tokens[i] == \"/\") {\n                // While top of 'ops' has same or greater precedence to current token, which\n                // is an operator. Apply operator on top of 'ops' to top two elements in values stack.\n                while ops.isEmpty == false && precedence(ops.top!) >= precedence(tokens[i]) {\n                    let val2 = values.pop()!\n                    let val1 = values.pop()!\n                    let op = ops.pop()!\n\n                    let result = applyOp(val1, val2, op)\n                    values.push(result)\n                }\n\n                // Push current token to 'ops'.\n                ops.push(tokens[i])\n            }\n\n            i += 1\n        }\n\n        // Entire expression has been parsed at this point, apply remaining ops to remaining values.\n        while ops.isEmpty == false {\n            let val2 = values.pop()!\n            let val1 = values.pop()!\n            let op = ops.pop()!\n\n            let result = applyOp(val1, val2, op)\n            values.push(result)\n        }\n\n        return values.top!\n    }\n}\n\nclass Stack<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    var count: Int { return array.count }\n\n    var top: T? { array.last }\n\n    func push(_ value: T) {\n        array.append(value)\n    }\n\n    func pop() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeLast()\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"the-score-of-students-solving-math-expression"}