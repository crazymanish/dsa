{"id":692173938,"lang":"swift","time":"2Â months","timestamp":1651565823,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/692173938/","is_pending":"Not Pending","title":"Uncrossed Lines","memory":"14.5 MB","code":"class Solution {\n    func maxUncrossedLines(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        return longestCommonSubsequence(nums1, nums2)\n    }\n    // Ditto question: 1143. Longest Common Subsequence\n    // https://leetcode.com/problems/longest-common-subsequence/\n    private func longestCommonSubsequence(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        let rows = nums1\n        let columns = nums2\n        \n        let rowsCount = rows.count\n        let columnsCount = columns.count\n        \n        var dpMatrix = Array(repeating: Array(repeating: 0, count: columnsCount+1), count: rowsCount+1)\n        \n        for rowIndex in 1...rowsCount {\n            let currentRowChar = rows[rowIndex-1]\n            for columnIndex in 1...columnsCount {\n                let currentColumnChar = columns[columnIndex-1]\n                \n                if currentRowChar == currentColumnChar {\n                    let previousLCS = dpMatrix[rowIndex-1][columnIndex-1]\n                    dpMatrix[rowIndex][columnIndex] = 1 + previousLCS\n                } else {\n                    let previousRowLCS = dpMatrix[rowIndex-1][columnIndex]\n                    let previousColumnLCS = dpMatrix[rowIndex][columnIndex-1]\n                    let previousLCS = max(previousRowLCS, previousColumnLCS)\n                    \n                    dpMatrix[rowIndex][columnIndex] = previousLCS\n                }\n            }\n        }\n        \n        return dpMatrix[rowsCount][columnsCount]\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"uncrossed-lines"}