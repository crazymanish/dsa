{"id":679133342,"lang":"swift","time":"2 months, 3 weeks","timestamp":1649787337,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/679133342/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {\n        let m = obstacleGrid.count\n        let n = obstacleGrid[0].count\n        \n        var lastRow = obstacleGrid.last!\n        for index in 0..<lastRow.count { lastRow[index] = 1-lastRow[index] }\n        \n        if lastRow.last! == 0 { return 0 } // Base case.\n        \n        for rowIndex in (0..<m-1).reversed() { // m-1 (because we already have last row) \n            var currentRow = obstacleGrid[rowIndex]\n            for index in 0..<currentRow.count { currentRow[index] = 1-currentRow[index] }\n            \n            for columnIndex in (0..<n-1).reversed() {\n                if currentRow[columnIndex] != 0 {\n                    currentRow[columnIndex] = currentRow[columnIndex+1] + lastRow[columnIndex]   \n                }\n            }\n            lastRow = currentRow\n        }\n        \n        return lastRow[0]\n    }\n}","compare_result":"11111111111111111101100110100000000111111","title_slug":"unique-paths-ii"}