{"id":657752757,"lang":"swift","time":"3 months, 4 weeks","timestamp":1646987542,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/657752757/","is_pending":"Not Pending","title":"Univalued Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isUnivalTree(_ root: TreeNode?) -> Bool {\n        guard let rootNode = root else { return true }\n        \n        if let left = rootNode.left, \n            let right = rootNode.right, \n            left.val == rootNode.val,\n            right.val == rootNode.val {\n                return true\n            }\n        \n        let isLeftUnivalTree = isUnivalTree(rootNode.left)\n        let isRightUnivalTree = isUnivalTree(rootNode.right)\n        \n        return isLeftUnivalTree && isRightUnivalTree\n    }\n}","compare_result":"101110011100001100100000010110010100011101100101110001110001100001111101","title_slug":"univalued-binary-tree"}