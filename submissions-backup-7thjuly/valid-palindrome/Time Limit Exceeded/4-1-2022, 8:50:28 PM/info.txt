{"id":671782842,"lang":"swift","time":"3 months, 1 week","timestamp":1648839028,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/671782842/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"N/A","code":"class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        var inputString = s.lowercased() \n        \n        let nonAlphanumericsCharacterSet = CharacterSet.alphanumerics.inverted\n        inputString = inputString\n            .components(separatedBy: nonAlphanumericsCharacterSet)\n            .joined(separator: \"\")\n     \n        return isPalindromeString(inputString)\n    }\n    \n   private func isPalindromeString(_ word: String) -> Bool {\n        var leftPointerIndex = 0\n        var rightPointerIndex = word.count - 1\n        \n        while leftPointerIndex < rightPointerIndex {\n            let leftChar = word[leftPointerIndex]\n            let rightChar = word[rightPointerIndex]\n            \n            if leftChar != rightChar { return false }\n            \n            leftPointerIndex += 1\n            rightPointerIndex -= 1\n        }\n        \n        return true\n    }\n}\n\nprivate extension StringProtocol {\n    subscript(_ offset: Int) -> Element { self[index(startIndex, offsetBy: offset)] }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"valid-palindrome"}