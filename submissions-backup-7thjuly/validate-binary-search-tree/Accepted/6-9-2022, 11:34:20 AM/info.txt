{"id":718002125,"lang":"swift","time":"4Â weeks","timestamp":1654767260,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/718002125/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"14.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        guard let currentNode = root else { return false }\n        \n        return findValidBST(root)\n    }\n    \n    private func findValidBST(_ root: TreeNode?, _ minLeft: Int = Int.min, _ maxRight: Int = Int.max) -> Bool {\n        guard let currentNode = root else { return true }\n        \n        let currentNodeValue = currentNode.val\n        \n        let isLeftValidBST = findValidBST(currentNode.left, minLeft, currentNodeValue)\n        let isRightValidBST = findValidBST(currentNode.right, currentNodeValue, maxRight)\n        \n        let isCurrentBST = minLeft < currentNodeValue && currentNodeValue < maxRight\n        \n        return isCurrentBST && isLeftValidBST && isRightValidBST\n    }    \n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree"}