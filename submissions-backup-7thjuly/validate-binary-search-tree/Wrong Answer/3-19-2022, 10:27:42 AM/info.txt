{"id":662901513,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647682062,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/662901513/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        guard let currentNode = root else { return false }\n        \n        if currentNode.isLeafNode { return true }\n        \n        if let leftNode = currentNode.left, let rightNode = currentNode.right {\n            return leftNode.val < currentNode.val && rightNode.val > currentNode.val\n        }\n        \n        if let leftNode = currentNode.left {\n            return leftNode.val < currentNode.val\n        }\n        \n        if let rightNode = currentNode.right {\n            return rightNode.val > currentNode.val\n        }\n        \n        let isLeftValidBST = isValidBST(currentNode.left)\n        let isRightValidBST = isValidBST(currentNode.right)\n        \n        return isLeftValidBST && isRightValidBST\n    }\n}\n\nprivate extension TreeNode {\n    var isLeafNode: Bool { left == nil && right == nil }\n}","compare_result":"11111111111001001001111111111111111111110110110101011001001111111111111000110101","title_slug":"validate-binary-search-tree"}