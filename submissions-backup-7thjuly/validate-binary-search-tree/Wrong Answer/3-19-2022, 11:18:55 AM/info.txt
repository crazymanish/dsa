{"id":662919932,"lang":"swift","time":"3 months, 2 weeks","timestamp":1647685135,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/662919932/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    private var hashMap: [Int: Int] = [:]\n    \n    func isValidBST(_ root: TreeNode?) -> Bool {\n        guard let currentNode = root else { return false }\n        \n        let leftMax = findMax(currentNode.left)\n        let rightMax = findMax(currentNode.right)\n        if leftMax > currentNode.val || rightMax < currentNode.val { return false }\n        \n        let isLeftValidBST = isValidBST(currentNode.left)\n        let isRightValidBST = isValidBST(currentNode.right)\n        \n        return isLeftValidBST && isRightValidBST\n    }\n    \n    private func findMax(_ root: TreeNode?) -> Int {\n        guard let currentNode = root else { return Int.min }\n        \n        let currentNodeValue = currentNode.val\n        \n        if let cacheMax = hashMap[currentNodeValue] { return cacheMax }\n        \n        let leftMax = findMax(currentNode.left)\n        let rightMax = findMax(currentNode.right)\n\n        let childMax = max(leftMax, rightMax)\n        let currentMax = max(currentNodeValue, childMax)\n        hashMap[currentNodeValue] = currentMax\n        \n        return currentMax\n    }\n}\n","compare_result":"01001110110111110110000000000000000000011011011111100110111000111101010111001110","title_slug":"validate-binary-search-tree"}