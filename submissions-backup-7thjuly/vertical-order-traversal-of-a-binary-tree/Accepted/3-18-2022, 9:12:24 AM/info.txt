{"id":662315922,"lang":"swift","time":"3 months, 3 weeks","timestamp":1647591144,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/662315922/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"14.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func verticalTraversal(_ root: TreeNode?) -> [[Int]] {\n        guard let root = root else { return [[]] }\n\n        var depthWithValuesMap: [Int: [NodeInfo]] = [:]\n        let queue = Queue<NodeInfo>()\n        queue.enQueue(NodeInfo(root, 0, 0))\n\n        while queue.isEmpty == false {\n            let currentNodeInfo = queue.deQueue()!\n            let currentNode = currentNodeInfo.node\n            let currentRow = currentNodeInfo.row\n            let currentColumn = currentNodeInfo.column\n\n            if let currentDepthMap = depthWithValuesMap[currentColumn] {\n                depthWithValuesMap[currentColumn] = currentDepthMap + [currentNodeInfo]\n            } else {\n                depthWithValuesMap[currentColumn] = [currentNodeInfo]\n            }\n\n            if let leftNode = currentNode.left {\n                queue.enQueue(NodeInfo(leftNode, currentRow+1, currentColumn-1))\n            }\n\n            if let rightNode = currentNode.right {\n                queue.enQueue(NodeInfo(rightNode, currentRow+1, currentColumn+1))\n            }\n        }\n\n        var outputArray: [[Int]] = []\n        let sortedMap = depthWithValuesMap.sorted(by: { $0.key < $1.key })\n\n        for (_, value) in sortedMap {\n            let sortedValues = value.sorted {\n                if $0.row == $1.row { return $0.node.val < $1.node.val }\n                return $0.column < $1.column\n            }\n\n            let intValues = sortedValues.map { $0.node.val }\n            outputArray.append(intValues)\n        }\n\n        return outputArray\n    }\n}\n\nclass NodeInfo {\n    let node: TreeNode\n    let row: Int\n    let column: Int\n\n    init(_ node: TreeNode, _ row: Int, _ column: Int) {\n        self.node = node\n        self.row = row\n        self.column = column\n    }\n}\n\nclass Queue<T> {\n    private var array: [T] = []\n\n    var isEmpty: Bool { return array.isEmpty }\n\n    func enQueue(_ value: T) {\n        array.append(value)\n    }\n\n    func deQueue() -> T? {\n        if isEmpty { return nil }\n\n        return array.removeFirst()\n    }\n}\n","compare_result":"11111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree"}